<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Five Computers</title><link href="http://fivecomputers.com/" rel="alternate"></link><link href="http://fivecomputers.com/feeds/15.atom.xml" rel="self"></link><id>http://fivecomputers.com/</id><updated>2008-07-15T00:00:00-05:00</updated><entry><title>SOAP gets in your eyes</title><link href="http://fivecomputers.com/soap-gets-in-your-eyes.html" rel="alternate"></link><updated>2008-07-15T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-07-15:soap-gets-in-your-eyes.html</id><summary type="html">&lt;div style="text-align: center;"&gt;
  &lt;a href="http://www.flickr.com/photos/52043707@N00/1511995758/"&gt;&lt;img width="500" height="334" src="http://farm3.static.flickr.com/2141/1511995758_bca60a43b4.jpg" alt="lava" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I have a few days between a recently finished contract and before I start the next one. I've decided to use that time to learn a bit of &lt;a href="http://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt; and the &lt;a href="http://www.rubyonrails.org/"&gt;Rails&lt;/a&gt; framework for a small project. I'm putting something together to do time tracking and communicate with the &lt;a href="http://www.projectorpsa.com/"&gt;Professional Services Automation software&lt;/a&gt; that we use in &lt;a href="http://www.verilab.com" title="Verilab, Inc."&gt;Verilab&lt;/a&gt;. As ever this sort of learning only really happens on an '&lt;em&gt;as-needed&lt;/em&gt;' basis so I think that a small driver project will move things along.&lt;/p&gt;

&lt;p&gt;One of the first things I've been working on is the underlying communications with the web services interface that Projector provides into their database. They use a &lt;a href="http://en.wikipedia.org/wiki/SOAP"&gt;SOAP&lt;/a&gt; interface, with a &lt;a href="http://www.w3.org/TR/wsdl"&gt;Web Services Description Language (WSDL)&lt;/a&gt; representation of the API. This WSDL file is a machine-readable, XML description of all of the API calls and expected types for those calls. You can interact with the SOAP interface directly, constructing the XML to place the request and then parsing the responses manually. However, that becomes painful very quickly, as the calls are very verbose and unwieldy. The solution is to use one of the various SOAP frameworks available, that interrogate the WSDL and then generate objects and methods to encapsulate the interface.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This all seemed mostly reasonable and I got a copy of &lt;a href="http://dev.ctor.org/soap4r"&gt;&lt;em&gt;soap4r&lt;/em&gt;&lt;/a&gt; which is the default Ruby SOAP interface. The latest version supports two interfaces, dynamically parsing the WSDL and generating object factories, or a script that statically parses the WSDL and generates a variety of helper classes that can be used to build the SOAP calls.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At this point, the almost total lack of documentation for &lt;em&gt;soap4r&lt;/em&gt; started to bite me. There is plenty of sample code, assuming you only ever want to pass a string (like a stock ticker) and only ever really expect a single integer or float to come back (such as a stock price). Very few examples go much further than that, but the Projector SOAP API uses a variety of heavily nested complexTypes and it wasn't very clear at all how to access or manipulate them. I made the initial mistake of trying to use the dynamic WSDL parsing, but after a while switched to using the statically generated classes which helped somewhat. At least then I could read the source and see what the member variables were in the classes and also what the class names were. Part of the problem seems to be that the Ruby world prefers the &lt;a href="http://en.wikipedia.org/wiki/Representational_State_Transfer"&gt;RESTful&lt;/a&gt; approach to web services, so SOAP is something of an ugly step-child. But SOAP is what I have to work with to get the information I need.&lt;br /&gt;
&lt;br /&gt;
At one point, I abandoned the Ruby version and tried to build an equivalent set of queries in Python. I'm more familiar with that language and thought it might remove one of the levels of complexity from the problem. In the Python world, I tried using the &lt;a href="https://fedorahosted.org/suds"&gt;SUDS&lt;/a&gt; framework to manage the WSDL. In this case, SUDS only supports dynamic parsing of the WSDL file and this parsing is quite a computationally expensive task. It doesn't make for fast, iterative exploration when it takes about 30 seconds to start up the script each time. I wasn't able to pickle the results to cache the driver either. Again, the SUDS framework has a real dearth of documentation - in fact it is even more sparse than &lt;em&gt;soap4r&lt;/em&gt;. However, poking around at the classes using the introspection features of Python helped me get a bit further along and also cast the Ruby experience in a different light. I was able to take what I'd learned in Python and apply it to the Ruby scripts and made quite a bit more progress.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I've been learning bits and pieces of Ruby along the way, too. Ruby is also a dynamic language with introspection, so I was able to start poking around in the objects, printing out methods and instance_variables to see what was going on. The interactive command line in Python is fantastic for doing this sort of exploration. I haven't yet found an equivalently powerful command line/ interactive way of doing this sort of playing around in Ruby (feel free to let me know how!). By some trial and error and dumping objects along the way I was able to get the data I wanted.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So a day and a half later, I now have a simple Ruby script that can talk to the ProjectorPSA SOAP API and query the list of active projects, then print out and count that list. Painful to get up the learning curve, but now at least I know how to work with the SOAP framework and make the method calls that I need. The equivalent Python script is almost there, but with a missing namespace in the generated XML that I haven't quite worked out how to control from the other side of the SUDS framework.&lt;br /&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;Overall, SOAP still seems very verbose and complex, for what it does - layers of objects, lots of XML, just to do very simple queries. A simple method invocation such as:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;
&amp;lt;env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&amp;gt;
  &amp;lt;env:Header&amp;gt;
        &amp;lt;n1:OpsAuthenticationHeader 
            xmlns:n1="http://www.opsplanning.com/webservices/public/data"
            env:mustUnderstand="0"&amp;gt;
          &amp;lt;n1:EmailAddress&amp;gt;REMOVED&amp;lt;/n1:EmailAddress&amp;gt;
          &amp;lt;n1:Password&amp;gt;REMOVED&amp;lt;/n1:Password&amp;gt;
          &amp;lt;n1:AccountName&amp;gt;verilab&amp;lt;/n1:AccountName&amp;gt;
        &amp;lt;/n1:OpsAuthenticationHeader&amp;gt;
  &amp;lt;/env:Header&amp;gt;
  &amp;lt;env:Body&amp;gt;
    &amp;lt;n2:ExportProjectList 
       xmlns:n2="http://www.opsplanning.com/webservices/public/data"&amp;gt;
      &amp;lt;n2:request xsi:type="n2:ExportProjectListRq"&amp;gt;
        &amp;lt;n2:Parameters&amp;gt;
          &amp;lt;n2:LimitToOpenForTimeOnly&amp;gt;true&amp;lt;/n2:LimitToOpenForTimeOnly&amp;gt;
          &amp;lt;n2:LimitToOpenForCostOnly&amp;gt;true&amp;lt;/n2:LimitToOpenForCostOnly&amp;gt;
          &amp;lt;n2:MaxRowsToReturn&amp;gt;200&amp;lt;/n2:MaxRowsToReturn&amp;gt;
          &amp;lt;n2:OnlyCountRows&amp;gt;false&amp;lt;/n2:OnlyCountRows&amp;gt;
        &amp;lt;/n2:Parameters&amp;gt;
      &amp;lt;/n2:request&amp;gt;
    &amp;lt;/n2:ExportProjectList&amp;gt;
  &amp;lt;/env:Body&amp;gt;
&amp;lt;/env:Envelope&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The Ruby code to generate this one remote procedure call is equally verbose, even with all the auto generated code within the &lt;em&gt;soap4r&lt;/em&gt; framework:
&lt;pre&gt;
require 'rubygems'
gem 'soap4r'
require 'soap/wsdlDriver'
require 'soap/header/simplehandler'
require 'defaultDriver'&lt;/p&gt;
&lt;h1&gt;new authentication class to construct proper SOAP Authentication header for&lt;/h1&gt;
&lt;h1&gt;each access to the server&lt;/h1&gt;
&lt;h1&gt;this is idiomatic for the soap4r framework - it is what it is&lt;/h1&gt;
&lt;p&gt;class ClientAuthHeaderHandler &amp;lt; SOAP::Header::SimpleHandler
  def initialize(userid, passwd)
    super(XSD::QName.new("http://www.opsplanning.com/webservices/public/data", 
                         "OpsAuthenticationHeader"))
    @sessionid = nil
    @userid = userid
    @passwd = passwd
  end&lt;/p&gt;
&lt;p&gt;def on_simple_outbound
    if @sessionid
      { "sessionid" =&amp;gt; @sessionid }
    else
      { "AccountName" =&amp;gt; "verilab", "EmailAddress" =&amp;gt; @userid, 
        "Password" =&amp;gt; @passwd }
    end
  end&lt;/p&gt;
&lt;p&gt;def on_simple_inbound(my_header, mustunderstand)
    @sessionid = my_header["sessionid"]
  end
end&lt;/p&gt;
&lt;h1&gt;make sure everything is unicode-friendly, just in case&lt;/h1&gt;
&lt;p&gt;XSD::Charset.encoding = 'UTF8'&lt;/p&gt;
&lt;h1&gt;create the SOAP driver object to handle the requests&lt;/h1&gt;
&lt;p&gt;endpoint_url = ARGV.shift
driver = OpsProjectorSvcSoap.new(endpoint_url)&lt;/p&gt;
&lt;h1&gt;enable debug output (showing SOAP XML) if you run this script with ruby -d&lt;/h1&gt;
&lt;p&gt;driver.wiredump_dev = STDOUT if $DEBUG&lt;/p&gt;
&lt;h1&gt;set up authentication object&lt;/h1&gt;
&lt;p&gt;user = "account name here"&lt;/p&gt;
&lt;h1&gt;uncomment to prompt for the password each time the script runs&lt;/h1&gt;
&lt;p&gt;passwd = ask("Password:") { |q| q.echo = false } &lt;/p&gt;
&lt;h1&gt;create the authentication token and stuff it into the driver's&lt;/h1&gt;
&lt;h1&gt;header for every SOAP request that gets generated&lt;/h1&gt;
&lt;p&gt;auth = ClientAuthHeaderHandler.new user, passwd
driver.headerhandler &amp;lt;&amp;lt; auth&lt;/p&gt;
&lt;h1&gt;Wrap the request in a Rq object, inside an ExportProjectList object&lt;/h1&gt;
&lt;h1&gt;means it all unrolls to be the correct SOAP/XML. There may be a more direct&lt;/h1&gt;
&lt;h1&gt;way to do this from just the ExportProjectList and property setting?&lt;/h1&gt;
&lt;h1&gt;:LimitToOpenForTimeOnly =&amp;gt; true ???&lt;/h1&gt;
&lt;p&gt;req = ExportProjectList.new(
        ExportProjectListRq.new(
            ExportProjectListRequest.new(true, true, nil, 2000000, nil, false) ) )&lt;/p&gt;
&lt;h1&gt;make the SOAP call, and extract the exportProjectListResult object&lt;/h1&gt;
&lt;p&gt;result = driver.exportProjectList(req).exportProjectListResult&lt;/p&gt;
&lt;h1&gt;display project list. The hierarchy can be intuited from the various bits of ruby&lt;/h1&gt;
&lt;h1&gt;generated by the wsdl2ruby.rb script (defaultMappingRegistry.rb, default.rb et al)&lt;/h1&gt;
&lt;p&gt;result.data.projectList.project.each { |project| print_project(project) }&lt;/p&gt;
&lt;p&gt;&lt;/pre&gt;The analogous Python code is similarly wordy. As our very bright admin, Will, says about SOAP '&lt;em&gt;run away, run away&lt;/em&gt;'&lt;/p&gt;</summary><category term="software"></category></entry></feed>