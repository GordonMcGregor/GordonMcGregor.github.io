<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Five Computers</title><link href="http://fivecomputers.com/" rel="alternate"></link><link href="http://fivecomputers.com/feeds/30.atom.xml" rel="self"></link><id>http://fivecomputers.com/</id><updated>2009-04-30T00:00:00-05:00</updated><entry><title>what did you say?</title><link href="http://fivecomputers.com/what-did-you-say.html" rel="alternate"></link><updated>2009-04-30T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2009-04-30:what-did-you-say.html</id><summary type="html">&lt;div style="text-align: center;"&gt;
  &lt;a href="http://www.wordle.net/gallery/wrdl/799366/Gordon%27s_tweets" title="Wordle: Gordon's tweets"&gt;&lt;img src="http://fivecomputers.typepad.com/.a/6a00e54efca38e883401156f6c5ebd970c-pi" width="700" height="319" alt="Wordle - Gordon_s tweets-1.jpg" /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;I've been poking around at the &lt;a href="http://apiwiki.twitter.com/Twitter-API-Documentation"&gt;Twitter API&lt;/a&gt;, in part just out of curiosity about what features are exposed. I have an interest in writing some visualisation widgets based upon it. The iPhone development course is also using a Twitter client as something of a 'hello world' app, too. Today, Tim O'Reilly pointed to a &lt;a href="http://radar.oreilly.com/2009/04/wordle-visualization-timoreilly-tweetstream.html"&gt;wordle visualisation&lt;/a&gt; of all the things that he's tweeted and &lt;a href="http://code.activestate.com/recipes/576594/"&gt;gave a link&lt;/a&gt; to some code that could be used to download everything you'd tweeted. I had a look at it and decided to write something similar, using the Twitter API directly, rather than scraping the Twitter site.&lt;/p&gt;

&lt;p&gt;The Twitter API I've been using is the excellent, minimalist &lt;a href="http://mike.verdone.ca/twitter/"&gt;python twitter tools&lt;/a&gt; by Mike Verdone. The main advantage over other python Twitter APIs is that ptt doesn't redefine any of the API calls. It does exactly what it says in the published &lt;a href="http://apiwiki.twitter.com/Twitter-API-Documentation"&gt;Twitter API&lt;/a&gt;. As a result, it is incredibly easy to use. The 100 or so lines it is implemented in are also a very instructive read, to &lt;a href="http://github.com/sixohsix/twitter/blob/ea668dec2e122000b0025a8cfc02c860388f621d/twitter/api.py"&gt;see how it is put together&lt;/a&gt;. I think it is a great example of how the attributes in Python can be used.&lt;/p&gt;

&lt;p&gt;The code I wrote is &lt;a href="http://www.mcgregorphoto.com/pub/what_did_you_say.py.txt"&gt;available for download&lt;/a&gt;. It respects the rate limiting imposed by Twitter and will output all of the tweets for a particular user, to a file called &amp;lt;username&amp;gt;.tweet in the file it is run from. You can change which users are fetched in the main() ftn. The resulting text file can be opened up and then copy/ pasted over into the &lt;a href="http://www.wordle.net/create"&gt;wordle creator.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class="posttagsblock"&gt;&lt;a href="http://technorati.com/tag/geekery" rel="tag"&gt;geekery&lt;/a&gt;, &lt;a href="http://technorati.com/tag/Twitter" rel="tag"&gt;Twitter&lt;/a&gt;, &lt;a href="http://technorati.com/tag/visualisation" rel="tag"&gt;visualisation&lt;/a&gt;&lt;/div&gt;</summary><category term="current affairs"></category><category term="software"></category></entry></feed>