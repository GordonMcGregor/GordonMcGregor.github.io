<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Five Computers</title><link href="http://fivecomputers.com/" rel="alternate"></link><link href="http://fivecomputers.com/feeds/all.atom.xml" rel="self"></link><id>http://fivecomputers.com/</id><updated>2013-09-18T11:02:00-05:00</updated><entry><title>UVM Report Servers</title><link href="http://fivecomputers.com/uvm-report-servers.html" rel="alternate"></link><updated>2013-09-18T11:02:00-05:00</updated><author><name>Gordon McGregor</name></author><id>tag:fivecomputers.com,2013-09-18:uvm-report-servers.html</id><summary type="html">&lt;p&gt;I'm a terrible procrastinator when it comes to writing things up or getting around to releasing finished work. As something of a &lt;a href="http://en.wikipedia.org/wiki/Commitment_device"&gt;commitment device&lt;/a&gt; to try and make me finish something, I submitted an abstract to the Austin Snyopsys Users group about some XML logging functionality I added to the UVM. The commitment device worked, my abstract was accepted and I finally got around to writing the paper, because of the looming submission deadline.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fivecomputers.com/static/images/papers/snug_custom_uvm_report_servers.pdf"&gt;Applications of Custom UVM Report Servers&lt;/a&gt; describes a way to convert UVM logging from plain text into a more reuseable XML format. So many tools attempt to extract meaning from plain text files using regular expressions and other potentially fragile parsing methods. Instead, this approach records the log in a structured format that can be reconstructed more effectively, on demand. There is also an example XML parsing GUI that dynamically reformats and collapses log messages for simpler debug. The source code from the paper is &lt;a href="https://bitbucket.org/verilab/uvm_structured_logs"&gt;available online.&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;This paper won the Technical Committee Award at the &lt;a href="http://www.synopsys.com/Community/SNUG/Austin/Pages/default.aspx"&gt;Austin Synopsys User Group&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Serving dynamic charts with Flask</title><link href="http://fivecomputers.com/serving-dynamic-charts-with-flask.html" rel="alternate"></link><updated>2013-08-18T13:14:00-05:00</updated><author><name>Gordon McGregor</name></author><id>tag:fivecomputers.com,2013-08-18:serving-dynamic-charts-with-flask.html</id><summary type="html">&lt;p&gt;I've written a little application to track FlexLM status. It's a script that runs as a cronjob and records the status of various FlexLM licenses to an SQLite database. In addition to logging the data, I've written a simple plotting application in matplotlib, but I really want to add some controls around it to select which license to plot, what date range to query from the database and other similarly straightforward features. The easiest way to do this seems to be setting up a basic web form and rendering the images as needed. &lt;/p&gt;
&lt;p&gt;Towards this end, I've been playing around with the &lt;a href="http://flask.pocoo.org/"&gt;Flask web framework&lt;/a&gt; which makes setting up a micro web application remarkably easy.  The code below is all that's required to set up a web server that will dynamically generate and serve images. The graph is rendered using matplotlib and then served up via Flask.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cStringIO&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/plot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;build_plot&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

  &lt;span class="c"&gt;# Generate the plot&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cStringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c"&gt;# Serve up the data&lt;/span&gt;
  &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This just generates the same plot each time it is loaded, but it is quite easy to move beyond this to generating different views based on user selections.&lt;/p&gt;
&lt;p&gt;&lt;img alt="flask plot" src="http://fivecomputers.com/static/images/flask_plotting.png" /&gt;&lt;/p&gt;</summary></entry><entry><title>Serving local web pages</title><link href="http://fivecomputers.com/serving-local-web-pages.html" rel="alternate"></link><updated>2013-08-16T13:41:00-05:00</updated><author><name>Gordon McGregor</name></author><id>tag:fivecomputers.com,2013-08-16:serving-local-web-pages.html</id><summary type="html">&lt;p&gt;I've been trying to improve some SystemVerilog constraints, in Synopsys VCS. One useful approach is to use the profiling features of the constraint solver to explore particular constraints that might be burning lots of cycles or proving hard to solve. There's a VCS runtime switch to turn on constraint profiling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ntb_solve_debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates a profile report in the &lt;code&gt;simv.cst&lt;/code&gt; directory, in &lt;code&gt;html/profile.xml&lt;/code&gt; The documentation mentions that this file is viewable in Chrome and Firefox but doesn't work in IE. However, it now seems like it also isn't viewable in Chrome. Instead, it hits a security issue: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Unsafe&lt;/span&gt; &lt;span class="n"&gt;attempt&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;///projects/simv.cst/html/cstrProf.xsl &lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;///projects/simv.cst/html/profile.xml. &lt;/span&gt;
&lt;span class="n"&gt;Domains&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;protocols&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ports&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, the file does load in Firefox, but I've been trying to avoid running multiple browsers. There is however a simple fix. You can run a web server and serve up the profile over html. That maybe sounds like a lot of work, but python ships with one in the standard library and it will run as a command-line loaded module. So, simply change directory to your build directory (or close to it - the server lets you navigate the file hierarchy too) and run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;SimpleHTTPServer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then in a browser on the same machine, open http://localhost:8000  E.g., if you run the server in the directory with the profile, you can go directly to http://localhost:8000/profile.xml&lt;/p&gt;</summary></entry><entry><title>Language Specification Length</title><link href="http://fivecomputers.com/language-specification-length.html" rel="alternate"></link><updated>2013-08-12T06:34:00-05:00</updated><author><name>Gordon McGregor</name></author><id>tag:fivecomputers.com,2013-08-12:language-specification-length.html</id><summary type="html">&lt;p&gt;&lt;center&gt;
&lt;img alt="Language Complexity" src="http://fivecomputers.com/static/images/language_complexity.png" /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Now, just as &lt;a href="https://twitter.com/GordonMcGregor/status/104282867168845825"&gt;number of keywords&lt;/a&gt; isn't the sole indicator of the complexity of a language, the length of the specification doesn't tell the entire story. However, SystemVerilog in the new 2012 version clocks in at 1315 pages.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;Language Specification page count&amp;#10;C++ 865&amp;#10;Java 644&amp;#10;C 540&amp;#10;C# 511&amp;#10;Ruby 311&amp;#10;Smalltalk 303&amp;#10;Erlang 31&amp;#10;&amp;#10;Well played Erlang. Well played.&lt;/p&gt;&amp;mdash; Jonas Elfström (@jonelf) &lt;a href="https://twitter.com/jonelf/statuses/366854642774183936"&gt;August 12, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;</summary></entry><entry><title>DVT Eclipse License under OS X</title><link href="http://fivecomputers.com/dvt-eclipse-license-under-os-x.html" rel="alternate"></link><updated>2013-08-07T09:18:00-05:00</updated><author><name>Gordon McGregor</name></author><id>tag:fivecomputers.com,2013-08-07:dvt-eclipse-license-under-os-x.html</id><summary type="html">&lt;p&gt;I find the &lt;a href="http://www.dvteclipse.com"&gt;DVT Eclipse SystemVerilog editor&lt;/a&gt; to be exceptionally useful when developing testbenches. One tricky thing to set up when installing these tools in OS X, is how to set an environment variable to point to the license file, for a GUI application.&lt;/p&gt;
&lt;p&gt;To set environment variables, they need to be defined before the GUI executes. In OS X this is achieved in the &lt;code&gt;/etc/launchd.conf&lt;/code&gt; file (that you probably have to create)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;launchd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In that file, set the environment variables using csh syntax. For the DVT license file, the environment variable is DVT_LICENSE_FILE&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;setenv&lt;/span&gt; &lt;span class="n"&gt;DVT_LICENSE_FILE&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dvt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;license&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, reboot your system and the environment variable should be set for all applications. You can check by opening a shell after the reboot and checking the environment variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;DVT_LICENSE_FILE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Playing with TreeMaps</title><link href="http://fivecomputers.com/playing-with-treemaps.html" rel="alternate"></link><updated>2013-07-31T11:26:00-05:00</updated><author><name>Gordon McGregor</name></author><id>tag:fivecomputers.com,2013-07-31:playing-with-treemaps.html</id><summary type="html">&lt;p&gt;Just started trying to implement a TreeMap visualization in Python, using Matplotlib. I found some &lt;a href="http://wiki.scipy.org/Cookbook/Matplotlib/TreeMap"&gt;sample code&lt;/a&gt; that got me started and led to some of the original &lt;a href="http://hcil.cs.umd.edu/trs/91-03/91-03.html"&gt;academic papers&lt;/a&gt; on the topic.   &lt;/p&gt;
&lt;p&gt;I've got the basics working, with a simple Tree class that I wrote to track nodes and leaves, along with weights and a place to store metadata. The Tree class just provides a wrapper around an array but helps in tracking parent/ child relationships and working out the relative weights of nodes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_leaf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recalculate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recalculate&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recalculate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_normalized_weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The actual drawing algorithm is straightforward too - for each level in the hierarchy, divide up the available space between all the nodes, weighted by their size and then flip between horizontal or vertical packing at each level of the hierarchy. Currently I'm putting the leaf node weight into the center of each rectangle as an annotation. This will probably need to change with additional nodes, as they will get too small to see. Mouseover tooltips or a &lt;a href="https://github.com/joferkington/mpldatacursor"&gt;datacursor&lt;/a&gt; that updates when a node is selected will probably be more useful.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.005&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.995&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.995&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_weight&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_weight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw_rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
        &lt;span class="n"&gt;edgecolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;facecolor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_leaf&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_xy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_width&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;
        &lt;span class="n"&gt;cy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ry&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_height&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_facecolor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_colour&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_weight&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                         &lt;span class="n"&gt;fontsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;va&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The full source is &lt;a href="https://github.com/GordonMcGregor/treemap"&gt;available on github.&lt;/a&gt; Trees can be implemented by creating all the nodes, one instance at a time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Tree&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HueTree&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lprime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;TreeMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Simple Treemap" src="http://fivecomputers.com/static/images/simple_treemap.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here I'm using the relative weight of the node within a given point in the hierarchy to specify the Hue value from an Hue/Saturation/Value triplet that gets converted to an RGB colour. &lt;/p&gt;
&lt;p&gt;The long form way of instantiating a tree gets quite cumbersome, so it is also possible to define a tree just as a nested set of tuples, and then use a helper function, &lt;code&gt;make_tree&lt;/code&gt; to construct the actual Tree objects.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Tree&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;TreeMap&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TreeMap&lt;/span&gt;

&lt;span class="n"&gt;short_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))))))&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;short_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TreeType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TreeMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Things look good with a small number of nodes, but when you start adding more leaves, you find that skinny rectangles start to dominate the plot. In this case, I'm using the relative weight as a gray value, rather than varying the hue. &lt;a href="http://www.win.tue.nl/~vanwijk/stm.pdf"&gt;Other algorithms&lt;/a&gt; are available for how the space is subdivided that can tend to give a more &lt;code&gt;square&lt;/code&gt; structure to the resulting map - I'm starting to investigate implementing the map using those algorithms to see how that looks.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Skinny Treemap" src="http://fivecomputers.com/static/images/skinny_treemap.png" /&gt;&lt;/p&gt;</summary></entry><entry><title>Coverage Visualization</title><link href="http://fivecomputers.com/coverage-visualization.html" rel="alternate"></link><updated>2013-07-28T07:12:00-05:00</updated><author><name>Gordon McGregor</name></author><id>tag:fivecomputers.com,2013-07-28:coverage-visualization.html</id><summary type="html">&lt;p&gt;I've been thinking recently about better ways to visualize coverage results. The new &lt;a href="http://www.accellera.org/downloads/standards/ucis"&gt;UCIS API&lt;/a&gt; provides ways to access coverage data more easily in third-party tools. I've mostly finished wrapping this API in Python, using SWIG, to create &lt;a href="https://bitbucket.org/verilab/pyucis"&gt;PyUCIS&lt;/a&gt;. That Python layer provides iterators and other Pythonic idioms to let you use the UCIS more efficiently. So far I'm seeing about 66% less code for equivalent C functions. Also, a large part of the UCIS implementation is tied up in XML and the Python libraries for XML support are excellent. I've found it a useful way to write tools around coverage data, quickly. That efficiency and quick development is key to providing a flexible toolkit to analyze coverage data. Rather than building an all singing, all dancing tool, I'd rather have a toolkit of features that allow me to inspect and visualize the data, that can be tuned to the particular job at hand. &lt;a href="http://matplotlib.org/"&gt;Matplotlib&lt;/a&gt; and other visualization tools, such as &lt;a href="http://networkx.github.io/"&gt;NetworkX&lt;/a&gt;, are great, free libraries that become available, once you get the data into a Python environment. Trying to do similar visualizations in C is possible, but generally prohibitive in time and effort. &lt;/p&gt;
&lt;p&gt;So now that I have easy access to coverage data and a wide range of visualization tools available, I've been thinking about how I'd like to look at that coverage. Normally we just get some sort of traffic light view, typically in something that looks like a spreadsheet or tree view. These views might group the coverage model in terms of the implemented model hierarchy - rolling up percentages, flagging things in red if they are low numbers of hits, green for close to 100% coverage. This is useful, but it doesn't really show much about the scope of the coverage model. It would be very easy to write a functional coverage model with a few, easily reached bins and declare '100% coverage' and move on.&lt;/p&gt;
&lt;p&gt;The normal way to avoid that scenario is careful review of the coverage model, inspection of code and meetings to discuss what is in the spec that needs coverage. That is certainly a necessary part of planning for verification. I just think there might be additional metrics that could be used and visualised to give a better indication of what the current state of the design is. I started thinking about &lt;em&gt;coverage density&lt;/em&gt;, in particular are there ways we could come up with a metric to show that a block has sufficient coverage - at least as a first order approximation. I think this could be useful for both simple code coverage - 100% on a small block is less interesting than 100% on a large block, for example, as well as for functional coverage. Again, a large, complex module with only a few functional coverage points and 100% coverage should be seen as worse result than a small block, with many functional coverage points, that is reporting 100%. We should be more worried about that large, mostly sparsely covered part of our design. I'd like the visualization of any coverage results to highlight those sorts of regions that are &lt;em&gt;completely covered&lt;/em&gt; but only thinly.&lt;/p&gt;
&lt;p&gt;This then starts to lead to an idea of density, based on the size of a module and the amount of coverage collected. I haven't found any examples of metrics like this. The only reference to coverage density that I have seen is in Functional Verification Coverage Measurement and Analysis by Andrew Piziali. There though the &lt;code&gt;coverage density&lt;/code&gt; refers to the number of coverage hits per simulation cycle and is a measure of efficiency of a given test.&lt;/p&gt;
&lt;p&gt;&lt;img alt="NetworkX sample" src="http://networkx.github.io/documentation/latest/_images/lanl_routes.png" /&gt;&lt;/p&gt;
&lt;p&gt;I think it might be reasonable to consider lines of code as a measure of the size of a module, although synthesized gate count would probably be a better indicator if that was available. Given that coverage data should be collected earlier in the process, before synthesis, I think the line count might be a good starting point. Similarly for the coverage model, we need a metric to estimate the 'size' or complexity of the coverage within a given block. Now a coverage model can span multiple parts of a design and be somewhat orthogonal to the implementation, but I think there is often a fairly direct mapping of some functional coverage to design blocks. When we have a reasonable metric for these, then we can come up with a view of the coverage density. I need to do some more investigation on what might be useful metrics here. It is quite straight-forward for code coverage but less of a one-to-one relationship for functional coverage.&lt;/p&gt;
&lt;p&gt;I think two dimensional graphs of that coverage data might become a useful way to see the coverage in a design, using &lt;a href="http://www.cs.umd.edu/hcil/treemap-history/"&gt;treemaps&lt;/a&gt; or network diagrams to allow a user to get a better feel for how the coverage closure is moving forward. Those could even be potentially animated over time to get a better view into the progress of the verification. This &lt;a href="http://flare.prefuse.org/apps/package_map"&gt;sample treemap&lt;/a&gt; shows a way of visualizing a source code repository, but the colour coding isn't really showing additional information. An display like this seems well suited to being extended to visualize coverage data. It could also be turned into a 3D visualization of the source code, with the density metric shown on the Z axis.&lt;/p&gt;
&lt;p&gt;In a similar way that code coverage is useful right until you get 100% coverage, then it is useless, these sorts of views won't really help in saying 'we have enough functional coverage'. But they might be useful in showing that there isn't enough coverage in particular areas of the design.&lt;/p&gt;</summary></entry><entry><title>Much ado about nothing</title><link href="http://fivecomputers.com/much-ado-about-nothing.html" rel="alternate"></link><updated>2013-07-23T21:30:00-05:00</updated><author><name>Gordon McGregor</name></author><id>tag:fivecomputers.com,2013-07-23:much-ado-about-nothing.html</id><summary type="html">&lt;p&gt;Having wasted a few hours debugging a UVM issue with &lt;code&gt;`uvm_do&lt;/code&gt; macros and a &lt;code&gt;pre_do&lt;/code&gt; task in a parent class, I decided to dig in to starting sequences without using the macro implementations. Some of the main EDA companies recommend this approach and there was a &lt;a href="http://events.dvcon.org/2011/proceedings/papers/09_1.pdf"&gt;good paper at DVCon&lt;/a&gt; discussing the pros and cons of the various UVM macros.&lt;/p&gt;
&lt;p&gt;So while several people recommend using the methods directly and avoiding the macros, I didn't find a great deal of clear information that described the correct set of method calls to use for a sequence_item and sequence. The examples in Adam's paper above are somewhat confusing, mixing sequence_items and sequences within the same code in some cases and suffering from some typos in other samples. After I worked out the information below, I took another look at the paper and the examples are correct (ignoring the typos), but the interleaving of the sequence and sequence_item start makes the operations more complex than it needs to be.&lt;/p&gt;
&lt;p&gt;Luckily enough the UVM source code is all available and I found the simplest way to resolve this was just to go and look at the implementation. In particular, two files are useful: the macro implementations themselves in src/macros/uvm_sequence_defines.svh and the class definitions for sequences and sequence_item in src/seq/uvm_sequence_base.svh&lt;/p&gt;
&lt;p&gt;My first confusion stemmed from the class inheritance. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;uvm_transaction&lt;/span&gt;
&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;uvm_sequence_item&lt;/span&gt;
&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;uvm_sequence_base&lt;/span&gt;
&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;uvm_sequence&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;At first glance, this tends to imply that a &lt;code&gt;uvm_sequence&lt;/code&gt; is just another type of &lt;code&gt;uvm_sequence_item&lt;/code&gt; and they can be treated as interchangeable. However, it fairly quickly becomes apparent that this is only very superficially true. The reality is that sequences ( &lt;code&gt;uvm_sequence&lt;/code&gt;) have a distinct API from sequence items (&lt;code&gt;uvm_sequence_item&lt;/code&gt;) and only share a few common features.&lt;/p&gt;
&lt;p&gt;In particular, sequences runs on a sequencer, without any arbitration controlling their execution. Multiple sequences can be launched on a sequencer and will execute in parallel. In contrast, sequence_items are subject to arbitration to control access to the sequencer's downstream port. A multi-step arbitration handshake is done, but only for sequence items - not sequences. This is the fundamental difference in the API and the reason for the different methods used to start items and sequences.&lt;/p&gt;
&lt;p&gt;Sequences and sequence items can both be launched using the various uvm_do macros, so the common base does help provide this abstraction to a single interface, but it really just hides the multiple APIs that are being used behind the scenes. I agree with the view that it is better to just understand what is going on and use the function calls directly. That way you will tend not to be surprised by the various hooks provided for callbacks within the macro invocations. &lt;/p&gt;
&lt;p&gt;From &lt;code&gt;uvm_sequence_defines.svh&lt;/code&gt;, the methods used to start a sequence item are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="no"&gt;`uvm_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;sequencer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for_grant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prior&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                           
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randomize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mid_do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;sequencer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;sequencer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for_item_done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A sequence however, is launched with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;     &lt;span class="no"&gt;`uvm_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub_seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                             
     &lt;span class="n"&gt;sub_seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randomize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="n"&gt;sub_seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;        
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;             
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mid_do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub_seq&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       
     &lt;span class="n"&gt;sub_seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;             
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub_seq&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      
     &lt;span class="n"&gt;sub_seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, the &lt;code&gt;`uvm_create&lt;/code&gt; macro call can be replaced with a direct call to the &lt;code&gt;factory::create&lt;/code&gt; method, for both the sequence_item and sequence, something like this for a sequence_item,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;custom_sequence_item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt; &lt;span class="n"&gt;get_full_name&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or this for a sequence&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;custom_sequence&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;seq&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt; &lt;span class="n"&gt;get_full_name&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the sequence_item startup, the various calls after the create can be replaced by two functions that encapsulate the arbitration for the driver port, to actually launch a transaction.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;custom_sequence_item&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_full_name&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
   &lt;span class="n"&gt;start_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                             
   &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randomize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="n"&gt;finish_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Breaking up the &lt;code&gt;uvm_do&lt;/code&gt; in this way provides more control over the randomization of the item - you can disable constraints, assign values after start_item, rather than trying to insert code in pre_do.  One fundamental problem with trying to use pre_do to modify constraints is there isn't a clear indication which call to &lt;code&gt;uvm_do&lt;/code&gt; in the sequence body has triggered the callback to &lt;code&gt;pre_do&lt;/code&gt;. The only indication in the pre_do API is if it is being called before a sequence_item is started or a sequence [via the is_item flag]. If you have multiple calls to &lt;code&gt;`uvm_do&lt;/code&gt; (or start_item) in your sequence body, there isn't a reliable way to differentiate which call has triggered the callback (other than maybe looking at the existence of a member variable, if it has been created or not, but this fails with loops or threads of execution in the body)&lt;/p&gt;
&lt;p&gt;Similarly to start a sequence, there is a simpler API that encapsulates the various calls to pre_start, pre_do etc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;custom_sequence&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;type_id&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;seq&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt; &lt;span class="n"&gt;get_full_name&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randomize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_sequencer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These 4 calls for a sequence_item and 3 calls for a sequence can then be further enhanced using control over constraints, randomize with {} constructs and also using the prioritization arguments to the tasks, or providing a different target sequencer. The end result is much more flexible than the 18 flavours of &lt;code&gt;`uvm_do&lt;/code&gt; macros and easier to work out the flow of execution. &lt;/p&gt;</summary></entry><entry><title>A sample of SV</title><link href="http://fivecomputers.com/a-sample-of-sv.html" rel="alternate"></link><updated>2013-07-21T00:00:00-05:00</updated><author><name>Gordon McGregor</name></author><id>tag:fivecomputers.com,2013-07-21:a-sample-of-sv.html</id><summary type="html">&lt;p&gt;I've recently migrated my blog from Typepad to &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;, hosted on GitHub. One nice feature of that is that I can write simple posts in Markdown syntax and it uses the Pygments syntax highlighting engine.  &lt;a href="systemverilog-support-in-pygments.html"&gt;A while ago&lt;/a&gt; I added SystemVerilog support to Pygments and looking below, it seems to be working!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;user_pkg::*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;uvm_pkg::*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;initial&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
        &lt;span class="no"&gt;`uvm_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;top&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;In top initial block&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;UVM_MEDIUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;run_test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>A VCD Parser</title><link href="http://fivecomputers.com/a-vcd-parser.html" rel="alternate"></link><updated>2013-07-18T20:40:00-05:00</updated><author><name>Gordon McGregor</name></author><id>tag:fivecomputers.com,2013-07-18:a-vcd-parser.html</id><summary type="html">&lt;p&gt;A co-worker mentioned that a generic VCD parser might be useful. &lt;a href="https://github.com/GordonMcGregor/vcd_parser"&gt;So I wrote one&lt;/a&gt;. It is mostly functional, after a few tweaks and some valuable suggestions from colleagues. &lt;/p&gt;
&lt;p&gt;The tokenizer got particular attention, due to the rather neat generator expression, assigned to &lt;code&gt;tokeniser&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Tokenize and parse the VCD file&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="c"&gt;# open the VCD file and create a token generator&lt;/span&gt;
    &lt;span class="n"&gt;tokeniser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokeniser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>A simple turtle graphics Domain Specific Language (DSL) parser</title><link href="http://fivecomputers.com/a-simple-turtle-graphics-domain-specific-language-dsl-parser.html" rel="alternate"></link><updated>2012-12-21T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2012-12-21:a-simple-turtle-graphics-domain-specific-language-dsl-parser.html</id><summary type="html">&lt;p&gt;I&amp;#39;ve been working through some of the exercises in &amp;#39;&lt;a href="http://pragprog.com/the-pragmatic-programmer" target="_self"&gt;The Pragmatic Programmer&lt;/a&gt;&amp;#39; while using it to mentor a colleague. &amp;#0160;In particular, I spent a bit of time working on the Domain Specific Language section and considering creating little DSLs to provide flexible control. I&amp;#39;ve painfully implemented DSLs in SystemVerilog/ UVM sequences in the past and thought about how I typically do this: build a parser, create tokens, then dispatch various execution functions to implement the commands. &amp;#0160;Often, the pain of building all these pieces in a language like C or SV is enough of a barrier that I wouldn&amp;#39;t even start. &amp;#0160;&lt;/p&gt;

&lt;p&gt;The example in the book is a simple Logo/ Turtle control language. &amp;#0160;Pen up, Pen down, draw, turn, etc. It tries to simplify things by using single letter command codes and only one optional argument.&lt;/p&gt;

&lt;p&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;P 2&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;D&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;W 2&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;N 1&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;E 1&amp;#0160;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;S 1&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;U&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I know Python has a &lt;a href="http://docs.python.org/2/library/turtle.html" target="_self"&gt;Logo/ Turtle engine built in&lt;/a&gt;&amp;#0160;so I decided to try to write a command parser/ dispatcher that would work with that, and let me write commands in a text file and have them execute Python Turtle commands.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an example script (you can see the results of this at the end of this post):&lt;/p&gt;

&lt;pre&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;color &amp;quot;green&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;up&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;goto 0 -50 # comments are allowed&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;down&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;circle 50&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;up&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;color &amp;quot;red&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;write &amp;quot;Done!&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;sleep 2&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;exit&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;I thought initially about having to parse out all the commands and arguments, then writing a large switch/ case statement (&lt;a href="http://bytebaker.com/2008/11/03/switch-case-statement-in-python/" target="_self"&gt;or the Python equivalent with a dictionary&lt;/a&gt;). &amp;#0160;After thinking about it a little longer I realised I didn&amp;#39;t have to do that at all. &amp;#0160;I could use the Introspection in Python to look up available methods and if they exist, call them. In fact, as not finding the method will just cause an exception, I can just try executing any command and if it fails, catch it and move on.&lt;/p&gt;

&lt;p&gt;So after parsing the input text stream (throw away comments, break up tokens using whitespace) then I just try to execute the command in the global namespace. &amp;#0160;I&amp;#39;ve pulled all the turtle functions into that namespace, so any turtle function is a valid command in my little parser. &amp;#0160;The &lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;globals()[command[0]]&lt;/span&gt; in the code below looks up the function in the global namespace and then calls it, using the other parts of the command (&lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;command[1:]&lt;/span&gt;), after they&amp;#39;ve each been processed through the Python &lt;span style="font-family: &amp;#39;courier new&amp;#39;, courier;"&gt;eval&lt;/span&gt; function to convert them from strings to whatever format they happen to be (numbers or strings mainly). &amp;#0160;The final trick in this is using the * operator to take take a list and pass it as one argument after another to the function:&lt;/p&gt;

&lt;pre&gt;globals()[command[0]](*(map(eval, command[1:])))&lt;/pre&gt;

&lt;p&gt;
&lt;br /&gt;
And that&amp;#39;s all that&amp;#39;s needed to implement a full Logo language parser and execution engine. The command syntax is fault tolerant and reports errors, with line numbers. &amp;#0160;New commands can be added easily, by defining new functions. &amp;#0160;They&amp;#39;ll be automatically supported as they are added to the namespace. &lt;/p&gt;

&lt;p&gt;Being able to pull something like this together quickly means that writing little Domain Specific Languages is possible and quite a low bar. &amp;#0160;Doing something similar in C is often more daunting and even worse in a language like SystemVerilog, with such a poor string and file handling library. &amp;#0160;There&amp;#39;s a real value in being able to program at such a high level, that can greatly enhance what&amp;#39;s possible or likely to be attempted in a verification environment. You &lt;em&gt;could&lt;/em&gt; do this in SystemVerilog, but how often would you even think to attempt it, without rejecting it as too much work?&lt;/p&gt;

&lt;p&gt;&amp;#0160;&lt;/p&gt;

&lt;div class="highlight" style="background: #f8f8f8;"&gt;
&lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #408080; font-style: italic;"&gt;# pull all the turtle commands into the global namespace, so they are valid commands&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold;"&gt;from&lt;/span&gt; &lt;span style="color: #0000ff; font-weight: bold;"&gt;turtle&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;

&lt;span style="color: #408080; font-style: italic;"&gt;# Use these 3 lines to make &amp;#39;sleep&amp;#39; and &amp;#39;exit&amp;#39; useable commands&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold;"&gt;from&lt;/span&gt; &lt;span style="color: #0000ff; font-weight: bold;"&gt;time&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;import&lt;/span&gt; sleep
&lt;span style="color: #008000; font-weight: bold;"&gt;from&lt;/span&gt; &lt;span style="color: #0000ff; font-weight: bold;"&gt;sys&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: #008000;"&gt;exit&lt;/span&gt;, argv

&lt;span style="color: #408080; font-style: italic;"&gt;# Given a handle to a series of strings of commands, do them&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold;"&gt;def&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;parse_and_draw&lt;/span&gt;(commands):
    &lt;span style="color: #008000; font-weight: bold;"&gt;for&lt;/span&gt; (line_number, line) &lt;span style="color: #aa22ff; font-weight: bold;"&gt;in&lt;/span&gt; &lt;span style="color: #008000;"&gt;enumerate&lt;/span&gt;(commands):
        line &lt;span style="color: #666666;"&gt;=&lt;/span&gt; line&lt;span style="color: #666666;"&gt;.&lt;/span&gt;split(&lt;span style="color: #ba2121;"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;)[&lt;span style="color: #666666;"&gt;0&lt;/span&gt;]  &lt;span style="color: #408080; font-style: italic;"&gt;# throw away comments&lt;/span&gt;

        &lt;span style="color: #008000; font-weight: bold;"&gt;if&lt;/span&gt; line:  &lt;span style="color: #408080; font-style: italic;"&gt;# if there is anything left after getting rid of comments&lt;/span&gt;

            command &lt;span style="color: #666666;"&gt;=&lt;/span&gt; line&lt;span style="color: #666666;"&gt;.&lt;/span&gt;strip()&lt;span style="color: #666666;"&gt;.&lt;/span&gt;split(&lt;span style="color: #ba2121;"&gt;&amp;#39; &amp;#39;&lt;/span&gt;)  &lt;span style="color: #408080; font-style: italic;"&gt;# parse using spaces to delimit tokens  &lt;/span&gt;
                                               &lt;span style="color: #408080; font-style: italic;"&gt;# a big limitation of this, we can&amp;#39;t have strings with spaces&lt;/span&gt;
                                               &lt;span style="color: #408080; font-style: italic;"&gt;# e.g.,  &amp;quot;hello world&amp;quot; won&amp;#39;t work as it&amp;#39;ll get split up&lt;/span&gt;
                                               &lt;span style="color: #408080; font-style: italic;"&gt;# into [&amp;#39;&amp;quot;hello&amp;#39;, &amp;#39;world&amp;quot;&amp;#39;] neither of which bits are valid when eval&amp;#39;ed&lt;/span&gt;

            &lt;span style="color: #008000; font-weight: bold;"&gt;if&lt;/span&gt; command[&lt;span style="color: #666666;"&gt;0&lt;/span&gt;]:  &lt;span style="color: #408080; font-style: italic;"&gt;# if we have any command left &lt;/span&gt;
                            &lt;span style="color: #408080; font-style: italic;"&gt;# (e.g., an indented comment would dissappear)&lt;/span&gt;

                &lt;span style="color: #008000; font-weight: bold;"&gt;try&lt;/span&gt;:
                    &lt;span style="color: #408080; font-style: italic;"&gt;# The meat of the dispatcher is the next line&lt;/span&gt;
                    &lt;span style="color: #408080; font-style: italic;"&gt;# using a try/ except means we can always try to run any command&lt;/span&gt;
                    &lt;span style="color: #408080; font-style: italic;"&gt;# and assume that it is valid and catch if it isn&amp;#39;t.&lt;/span&gt;
                    &lt;span style="color: #408080; font-style: italic;"&gt;# globals() returns a dictionary of every function defined in the global namespace&lt;/span&gt;
                    &lt;span style="color: #408080; font-style: italic;"&gt;# including all the turtle commands because of the from turtle import *&lt;/span&gt;
                    &lt;span style="color: #408080; font-style: italic;"&gt;# command[0] is used as a key to look up the function name&lt;/span&gt;
                    &lt;span style="color: #408080; font-style: italic;"&gt;# we then pass all of the other tokens (command[1:]) through eval (using map)&lt;/span&gt;
                    &lt;span style="color: #408080; font-style: italic;"&gt;# and pass them as arguments to the function we looked up&lt;/span&gt;

                    &lt;span style="color: #008000;"&gt;globals&lt;/span&gt;()[command[&lt;span style="color: #666666;"&gt;0&lt;/span&gt;]](&lt;span style="color: #666666;"&gt;*&lt;/span&gt;(&lt;span style="color: #008000;"&gt;map&lt;/span&gt;(&lt;span style="color: #008000;"&gt;eval&lt;/span&gt;, command[&lt;span style="color: #666666;"&gt;1&lt;/span&gt;:])))

                    &lt;span style="color: #408080; font-style: italic;"&gt;# a key error occurs if we don&amp;#39;t find command[0] in the global namespace&lt;/span&gt;
                &lt;span style="color: #008000; font-weight: bold;"&gt;except&lt;/span&gt; &lt;span style="color: #d2413a; font-weight: bold;"&gt;KeyError&lt;/span&gt;:
                    &lt;span style="color: #008000; font-weight: bold;"&gt;print&lt;/span&gt; &lt;span style="color: #ba2121;"&gt;&amp;#39;Unknown command&amp;#39;&lt;/span&gt;, command[&lt;span style="color: #666666;"&gt;0&lt;/span&gt;], &lt;span style="color: #ba2121;"&gt;&amp;#39;on line &amp;#39;&lt;/span&gt;, line_number

                    &lt;span style="color: #408080; font-style: italic;"&gt;# Some other error occurred (e.g., the called function raised an Exception)&lt;/span&gt;
                    &lt;span style="color: #408080; font-style: italic;"&gt;# report it here and continue on (if we didn&amp;#39;t catch it, the program would end)&lt;/span&gt;
                &lt;span style="color: #008000; font-weight: bold;"&gt;except&lt;/span&gt; &lt;span style="color: #d2413a; font-weight: bold;"&gt;Exception&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;as&lt;/span&gt; e:
                    &lt;span style="color: #008000; font-weight: bold;"&gt;print&lt;/span&gt; &lt;span style="color: #ba2121;"&gt;&amp;#39;Invalid command&amp;#39;&lt;/span&gt;, command[&lt;span style="color: #666666;"&gt;0&lt;/span&gt;], &lt;span style="color: #ba2121;"&gt;&amp;#39;on line &amp;#39;&lt;/span&gt;, line_number,  e


&lt;span style="color: #008000; font-weight: bold;"&gt;if&lt;/span&gt; __name__ &lt;span style="color: #666666;"&gt;==&lt;/span&gt; &lt;span style="color: #ba2121;"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    &lt;span style="color: #408080; font-style: italic;"&gt;# open the first file on the command line, get commands from that and run them&lt;/span&gt;
    commands &lt;span style="color: #666666;"&gt;=&lt;/span&gt; &lt;span style="color: #008000;"&gt;open&lt;/span&gt;(argv[&lt;span style="color: #666666;"&gt;1&lt;/span&gt;])&lt;span style="color: #666666;"&gt;.&lt;/span&gt;xreadlines()

    &lt;span style="color: #408080; font-style: italic;"&gt;# note that the parse and draw routine works on a list of commands, it doesn&amp;#39;t know about files&lt;/span&gt;
    &lt;span style="color: #408080; font-style: italic;"&gt;# or anything else.  This seperation is is useful, as we can get commands from anywhere&lt;/span&gt;
    parse_and_draw(commands)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;#0160;&lt;/p&gt;

&lt;p&gt;
&lt;a class="asset-img-link" href="http://fivecomputers.typepad.com/.a/6a00e54efca38e8834017c34da956e970b-pi" style="display: inline;"&gt;&lt;img alt="12:21:12 10:37 AM" border="0" class="asset  asset-image at-xid-6a00e54efca38e8834017c34da956e970b image-full" src="http://fivecomputers.typepad.com/.a/6a00e54efca38e8834017c34da956e970b-800wi" title="12:21:12 10:37 AM" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</summary><category term="books"></category><category term="eda"></category><category term="verification"></category></entry><entry><title>A UVM layer for PyHVL</title><link href="http://fivecomputers.com/a-uvm-layer-for-pyhvl.html" rel="alternate"></link><updated>2012-09-05T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2012-09-05:a-uvm-layer-for-pyhvl.html</id><summary type="html">&lt;p&gt;Over the past few years I've been building verification environments in Python, hooked up to SystemVerilog and Verilog simulators. The glue is &lt;a href="http://sourceforge.net/projects/pyhvl/"&gt;PyHVL&lt;/a&gt;. But PyHVL is just the glue. It does open up the possibility of dynamic languages and scripting to talk to your test bench, but it isn't enough to implement a complete verification environment, quickly.&lt;/p&gt;

&lt;p&gt;To that end, I've started building analogues for most of the &lt;a href="http://www.uvmworld.org/"&gt;UVM&lt;/a&gt; classes, in Python/ PyHVL. Monitors, drivers, checkers, interfaces, scoreboards, all the standard sorts of pieces that you'd expect from a modern verification environment. With no compiling between iterations, and a command-line REPL to drop to for debug and interactive exploration. All backed with the batteries-included philosophy of Python. The sweet spot for this is probably somewhere within a fully fleshed out SystemVerilog testbench, leveraging the best features of SV (RTL/design, randomization with constraints, coverage, assertions) with the best features of Python for the higher level pieces of the testbench. At the same time, there is the potential to write the entire testbench in Python and the whole design in Verilog and use a free simulator such as &lt;a href="http://iverilog.icarus.com/"&gt;Icarus&lt;/a&gt; or &lt;a href="http://sourceforge.net/projects/gplcver/"&gt;CVer&lt;/a&gt;. Python brings a variety of useful features for testbench development; dynamic language, rapid development, rich set of libraries, fast iteration and a high level programming abstraction.&lt;/p&gt;

&lt;p&gt;I've been able to write models of processors that actually execute instructions and check the RTL, where the initial development time for a working CPU model was about 4 hours. There is effectively no recompile time cost - just re-run and the Python verification environment is re-interpreted as the simulation starts up.&lt;/p&gt;

&lt;p&gt;The main advantage of using Python for a testbench is writing less code. Less code means fewer bugs. The higher level language features of Python let you write more efficient code. As a quick example, here is the entire class definition for a PyHVL/ UVM interface, ready to hook up to RTL and monitor/drive signals in a DUT.&lt;/p&gt;

&lt;div class="highlight" style="background: #f8f8f8"&gt;
  &lt;pre style="line-height: 125%"&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;from&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;pluvm.uvm_package&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold"&gt;import&lt;/span&gt; &lt;span style="color: #666666"&gt;*&lt;/span&gt;

HOST_BUS_SIGNALS&lt;span style="color: #666666"&gt;=&lt;/span&gt;(&lt;span style="color: #BA2121"&gt;'reset'&lt;/span&gt;, &lt;span style="color: #BA2121"&gt;'clock'&lt;/span&gt;, &lt;span style="color: #BA2121"&gt;'cycle_count'&lt;/span&gt;, &lt;span style="color: #BA2121"&gt;'host_rdata'&lt;/span&gt;, &lt;span style="color: #BA2121"&gt;'host_ack'&lt;/span&gt;,
                  &lt;span style="color: #BA2121"&gt;'host_err'&lt;/span&gt;, &lt;span style="color: #BA2121"&gt;'host_address'&lt;/span&gt;, &lt;span style="color: #BA2121"&gt;'host_valid'&lt;/span&gt;, &lt;span style="color: #BA2121"&gt;'host_wdata'&lt;/span&gt;, 
                  &lt;span style="color: #BA2121"&gt;'host_strobe'&lt;/span&gt;, &lt;span style="color: #BA2121"&gt;'host_rwb'&lt;/span&gt;)

&lt;span style="color: #008000; font-weight: bold"&gt;class&lt;/span&gt; &lt;span style="color: #0000FF; font-weight: bold"&gt;host_interface&lt;/span&gt;(uvm_interface):

        &lt;span style="color: #008000; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #0000FF"&gt;__init__&lt;/span&gt;(&lt;span style="color: #008000"&gt;self&lt;/span&gt;, name, hierarchy):
                uvm_interface&lt;span style="color: #666666"&gt;.&lt;/span&gt;__init__(&lt;span style="color: #008000"&gt;self&lt;/span&gt;, name, hierarchy)

                &lt;span style="color: #008000; font-weight: bold"&gt;for&lt;/span&gt; signal &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; HOST_BUS_SIGNALS:
                        &lt;span style="color: #008000"&gt;self&lt;/span&gt;&lt;span style="color: #666666"&gt;.&lt;/span&gt;add_signal(signal)

&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These classes can of course leverage the standard pyunit test frameworks and have unit tests in every class.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>sshfs for OS X Lion</title><link href="http://fivecomputers.com/sshfs-for-os-x-lion.html" rel="alternate"></link><updated>2012-04-26T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2012-04-26:sshfs-for-os-x-lion.html</id><summary type="html">&lt;p&gt;Installed the latest version of fuse and sshfs, using &lt;a href="http://mxcl.github.com/homebrew/"&gt;Homebrew&lt;/a&gt;. I had been using FUSE for a while with previous versions of OS X, but haven't had much luck under Lion. Tried again today, using &lt;a href="http://fuse4x.org/"&gt;Fuse4x&lt;/a&gt;, rather than libFUSE and everything worked very transparently:&lt;/p&gt;

&lt;pre&gt;
brew install fuse4x sshfs
&lt;/pre&gt;

&lt;p&gt;&lt;strike&gt;and that was it!&lt;/strike&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt; No, of course that wasn't true. First I had to re-update my Xcode command-line tools. This then removed autoreconf which Apple no longer provide as part of their &lt;a href="http://brianpeddle.com/tag/autoreconf/"&gt;XCode tools bundle&lt;/a&gt; [in neither the command line, or GUI release]. So, via Google, I find you have to install a different set of &lt;a href="https://github.com/kennethreitz/osx-gcc-installer/downloads"&gt;gcc tools&lt;/a&gt;, not shipped by Apple. Then, back to the brew install command line above, and things are a lot happier.&lt;br /&gt;
&lt;strike&gt;and that was it!&lt;/strike&gt;&lt;strike&gt;&lt;br /&gt;&lt;/strike&gt; Well, except you really do need to read the installation message which says&lt;br /&gt;
&lt;pre&gt;
==&amp;gt; Caveats
&lt;/pre&gt;
&lt;pre&gt;
   Make sure to follow the directions given by &lt;code&gt;brew info fuse4x-kext&lt;/code&gt;before trying to use a FUSE-based filesystem.&lt;br /&gt;
&lt;/pre&gt;&lt;br /&gt;
Then if you type&lt;br /&gt;
&lt;pre&gt;
brew info fuse4x-kext
&lt;/pre&gt;&lt;br /&gt;
You find you need to run the following two commands to get anything to actually work:&lt;br /&gt;
&lt;pre&gt;
sudo cp -rfX /usr/local/Cellar/fuse4x-kext/0.8.14/Library/Extensions/fuse4x.kext /System/Library/Extensions 
sudo chmod +s /System/Library/Extensions/fuse4x.kext/Support/load_fuse4x
&lt;/pre&gt;and that was it!&lt;br /&gt;
&lt;br /&gt;
No really, it was. Then I was able to mount remote directories, with the simple command:&lt;br /&gt;
&lt;pre&gt;
sshfs &amp;lt;remote_host&amp;gt;:&amp;lt;remote_path&amp;gt; &amp;lt;local_path&amp;gt;
&lt;/pre&gt;&lt;br /&gt;
and it actually worked!&lt;br /&gt;
To unmount a mounted partition, use the standard&lt;br /&gt;
&lt;br /&gt;
&lt;pre&gt;
umount &amp;lt;local_path&amp;gt; 
&lt;/pre&gt;
&lt;pre&gt;
&lt;br /&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;br /&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;div class="posttagsblock"&gt;&lt;a href="http://technorati.com/tag/geekery" rel="tag"&gt;geekery&lt;/a&gt;, &lt;a href="http://technorati.com/tag/OSX" rel="tag"&gt;OSX&lt;/a&gt;&lt;/div&gt;</summary><category term=""></category></entry><entry><title>Simple web server</title><link href="http://fivecomputers.com/simple-web-server.html" rel="alternate"></link><updated>2012-04-20T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2012-04-20:simple-web-server.html</id><summary type="html">&lt;p&gt;Ever find you need to implement a web server or provide some web pages on a local network? Maybe you don't have an Apache server up and running or don't want to go to the trouble of configuring it. I've found this with &lt;a href="http://www.naturaldocs.org/"&gt;Natural Docs&lt;/a&gt; documentation, where the tools will generate a bunch of .html files that you can read locally if you are on the machine where they are generated. &lt;a href="http://www.fivecomputers.com/2012/04/systemverilog-support-in-pygments.html"&gt;Pygments&lt;/a&gt; also will generate html formatted files that you might want to serve. However, you might want to make them accessible to a small team. Here is a quick trick that can make this task very simple. Python ships with a basic HTTP server module. You can get it up and running, serving files from a given directory down with the following command:&lt;/p&gt;

&lt;pre&gt;
python -m SimpleHTTPServer
&lt;/pre&gt;

&lt;p&gt;and that's all there is to it! The default port will be 8000, but you can provide a different port on the command line (just add the port number after the SimpleHTTPServer - any number above reserved range of 0-1024 will work. The server will be accessible to any machines that can see that port on the machine it is running on. The server won't handle a high load and isn't particular secure, so I wouldn't make it available to the general public. But if you need to serve some pages quickly and simply, to a small number of users within a private network, this can be a really fast way to get to that point. If and when the load becomes an issue, or security concerns are important, then a heavyweight server like Apache is a much better choice.&lt;/p&gt;

&lt;p&gt;Once the server is up and running you access it via a web browser at http://machine_name:8000 File paths are all relative to the directory the server is running in. If there is an index.html in that directory, it will be loaded by default when you access the server at that URL.&lt;/p&gt;</summary><category term="software"></category><category term="thingumyjigs"></category></entry><entry><title>SystemVerilog support in Pygments</title><link href="http://fivecomputers.com/systemverilog-support-in-pygments.html" rel="alternate"></link><updated>2012-04-19T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2012-04-19:systemverilog-support-in-pygments.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.flickr.com/photos/mcgregorphoto/6949231074/" title="svforpygments by Gordon McGregor, on Flickr"&gt;&lt;img alt="svforpygments" src="http://farm6.staticflickr.com/5454/6949231074_4dd2096121_c.jpg" width="720" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve used &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; in the past to do syntax highlighting of Python and C code to drop into documentation. I&amp;#39;ve wanted SystemVerilog support for a while, but the tool didn&amp;#39;t &lt;a href="http://pygments.org/languages/"&gt;support the language&lt;/a&gt;. I eventually got frustrated enough by this to go and add it myself. The motivation was so that I could set up an internal &lt;a href="http://paste.pocoo.org/about/"&gt;LodgeIt! pastebin&lt;/a&gt; to allow colleagues to discuss snippets of code, without having to paste it into emails, or Yammer discussions, both of which always scramble formatting and make discussions harder than they should be. The pastebin that I decided to use, used Pygments as the backend, so I decided to add SystemVerilog support to that project.&lt;/p&gt;

&lt;p&gt;The main task was adding the &lt;a href="https://twitter.com/#!/GordonMcGregor/status/104282867168845825"&gt;more than 220 keywords&lt;/a&gt; in SystemVerilog into the format required for Pygments. I ended up cutting and pasting the keywords from the specification into a text file, then using a quick script to generate the &lt;a href="https://bitbucket.org/birkenfeld/pygments-main/src/96e8b9cb83ef/pygments/lexers/hdl.py"&gt;appropriate structures&lt;/a&gt; for Pygments. I found that generating it automatically was about the only way to avoid typos and saved quite a bit of time and typing.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;d like to try it out, installation is straightforward:&lt;/p&gt;

&lt;div class="highlight"&gt;
&lt;pre&gt;&lt;span class="n"&gt;hg&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;bitbucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;birkenfeld&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pygments&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;pygments&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;pygments&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After that, you just run the &amp;#39;pygmentize&amp;#39; command to see formatted source code.&lt;/p&gt;

&lt;pre&gt;pygmentize hello_world.sv
&lt;/pre&gt;

&lt;p&gt;This sample below comes from the UVM source code &amp;#39;hello_world.sv&amp;#39; example.&lt;/p&gt;

&lt;p&gt;&lt;span style="font-family: monospace; white-space: pre;"&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;module&lt;/span&gt; hello_world;&lt;/span&gt;&lt;/p&gt;

&lt;div class="highlight"&gt;
&lt;pre&gt;  &lt;span style="color: #008000; font-weight: bold;"&gt;import&lt;/span&gt; &lt;span style="color: #0000ff; font-weight: bold;"&gt;uvm_pkg::*&lt;/span&gt;;
  &lt;span style="color: #880000;"&gt;`include&lt;/span&gt; &lt;span style="color: #ba2121;"&gt;&amp;quot;uvm_macros.svh&amp;quot;&lt;/span&gt;

  &lt;span style="color: #880000;"&gt;`include&lt;/span&gt; &lt;span style="color: #ba2121;"&gt;&amp;quot;packet.sv&amp;quot;&lt;/span&gt;
  &lt;span style="color: #880000;"&gt;`include&lt;/span&gt; &lt;span style="color: #ba2121;"&gt;&amp;quot;producer.sv&amp;quot;&lt;/span&gt;
  &lt;span style="color: #880000;"&gt;`include&lt;/span&gt; &lt;span style="color: #ba2121;"&gt;&amp;quot;consumer.sv&amp;quot;&lt;/span&gt;
  &lt;span style="color: #880000;"&gt;`include&lt;/span&gt; &lt;span style="color: #ba2121;"&gt;&amp;quot;top.sv&amp;quot;&lt;/span&gt;

  top mytop;

  &lt;span style="color: #008000; font-weight: bold;"&gt;initial&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;begin&lt;/span&gt;
    &lt;span&gt;$&lt;/span&gt;timeformat(&lt;span style="color: #666666;"&gt;-9&lt;/span&gt;,&lt;span style="color: #666666;"&gt;0&lt;/span&gt;,&lt;span style="color: #ba2121;"&gt;&amp;quot; ns&amp;quot;&lt;/span&gt;,&lt;span style="color: #666666;"&gt;5&lt;/span&gt;);
    uvm_default_table_printer.knobs.name_width&lt;span style="color: #666666;"&gt;=20&lt;/span&gt;;
    uvm_default_table_printer.knobs.type_width&lt;span style="color: #666666;"&gt;=50&lt;/span&gt;;
    uvm_default_table_printer.knobs.size_width&lt;span style="color: #666666;"&gt;=10&lt;/span&gt;;
    uvm_default_table_printer.knobs.value_width&lt;span style="color: #666666;"&gt;=14&lt;/span&gt;;
    set_config_int(&lt;span style="color: #ba2121;"&gt;&amp;quot;top.producer1&amp;quot;&lt;/span&gt;,&lt;span style="color: #ba2121;"&gt;&amp;quot;num_packets&amp;quot;&lt;/span&gt;,&lt;span style="color: #666666;"&gt;2&lt;/span&gt;);
    set_config_int(&lt;span style="color: #ba2121;"&gt;&amp;quot;top.producer2&amp;quot;&lt;/span&gt;,&lt;span style="color: #ba2121;"&gt;&amp;quot;num_packets&amp;quot;&lt;/span&gt;,&lt;span style="color: #666666;"&gt;4&lt;/span&gt;);
    set_config_int(&lt;span style="color: #ba2121;"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;,&lt;span style="color: #ba2121;"&gt;&amp;quot;recording_detail&amp;quot;&lt;/span&gt;,&lt;span style="color: #880000;"&gt;UVM_LOW&lt;/span&gt;);
    &lt;span style="color: #408080; font-style: italic;"&gt;//uvm_default_printer = uvm_default_tree_printer;&lt;/span&gt;
    uvm_default_printer.knobs.reference&lt;span style="color: #666666;"&gt;=0&lt;/span&gt;;
    mytop &lt;span style="color: #666666;"&gt;=&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;new&lt;/span&gt;(&lt;span style="color: #ba2121;"&gt;&amp;quot;top&amp;quot;&lt;/span&gt;); 
    uvm_default_table_printer.knobs.type_width&lt;span style="color: #666666;"&gt;=20&lt;/span&gt;;
    run_test();
  &lt;span style="color: #008000; font-weight: bold;"&gt;end&lt;/span&gt;
&lt;span style="color: #008000; font-weight: bold;"&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A further challenge is working out how to embed this sort of code snippet into a TypePad blog post. In general, Pygments generates html code with CSS styles and classes. This doesn&amp;#39;t play well with TypePad which seems to consume or remove the CSS styles. You can however get Pygments to generate inline styles, which can then be pasted into TypePad. The syntax for this is:&lt;/p&gt;

&lt;pre&gt;pygmentize -f html -Ofull,noclasses hello_world.sv
&lt;/pre&gt;

&lt;p&gt;And then the output html can be pasted straight into an HTML editor.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Hobgoblins</title><link href="http://fivecomputers.com/hobgoblins.html" rel="alternate"></link><updated>2012-02-05T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2012-02-05:hobgoblins.html</id><summary type="html">&lt;p&gt;&lt;center&gt;
  &lt;p&gt;&lt;span class="st"&gt;&lt;i&gt;A foolish consistency is the hobgoblin of little minds, adored by little statesmen and philosophers and divines&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;p style="text-align: right;"&gt;&lt;i&gt;-&lt;/i&gt; R. W. Emerson&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;Looking over the VPI iterator sample code I posted last night from PyHVL, I noticed something. I've defined the API as follows:&lt;/p&gt;
&lt;div class="highlight" style="background: #f8f8f8"&gt;
  &lt;pre style="line-height: 125%"&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #0000FF"&gt;vpi_iterator&lt;/span&gt;(handle, type&lt;span style="color: #666666"&gt;=&lt;/span&gt;vpiNet):
&lt;/pre&gt;
&lt;/div&gt;With the &lt;i&gt;handle&lt;/i&gt; first and an optional &lt;i&gt;type&lt;/i&gt; parameter second, taking the default value of &lt;i&gt;vpiNet&lt;/i&gt;. Looking again at the C implementation, I see that the method signature is the reverse:&lt;br /&gt;
&lt;div class="highlight" style="background: #f8f8f8"&gt;
  &lt;pre style="line-height: 125%"&gt;
itr &lt;span style="color: #666666"&gt;=&lt;/span&gt; vpi_iterate(vpiNet, mod);
&lt;/pre&gt;
&lt;/div&gt;Now, I'm faced with a decision. I could make the Python &lt;i&gt;vpi_iterator()&lt;/i&gt; call consistent with the similar C API, and reverse the parameters, or I can keep it the same way. Keeping it the same way allows the use of the default argument for &lt;i&gt;vpiNet&lt;/i&gt;. Optional arguments must follow required arguments, so I couldn't reverse it and keep the &lt;i&gt;type&lt;/i&gt;=&lt;i&gt;vpiNet&lt;/i&gt; as an option, it would have to become &lt;i&gt;(type, handle).&lt;/i&gt; In this case, I don't think the default type is particularly intuitive from the name, so I would tend to think there is more value in reversing the arguments, so that it is consistent with the C API's similar function signature.&lt;br /&gt;
&lt;div class="highlight" style="background: #f8f8f8"&gt;
  &lt;pre style="line-height: 125%"&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #0000FF"&gt;vpi_iterator&lt;/span&gt;(type, handle):
&lt;/pre&gt;
&lt;/div&gt;Some people might think this is a totally arbitrary consideration. I believe this sort of detail is important. My favorite languages are internally consistent, so that when you start using a new library or part of the language, the structures and idioms are so familiar you can often code things correctly without having fully read the documentation. Most of the Python standard library is like that, you can pick up a new library and be productive, quickly, because there aren't jarring inconstancies. If I want people to use this &lt;i&gt;vpi_iterator&lt;/i&gt; method, coming from C, it will help if it matches the general argument patterns used there. Less friction to getting code working first time.&lt;br /&gt;
Each of these is just a small thing that you have to remember, but each time it catches you out it is annoying and maybe knocks you off your train of thought to fix it. The details and consistency are important to people being productive in a language.&lt;br /&gt;
&lt;br /&gt;
I wish SystemVerilog had more of that consistency - semicolons to mark the end of a function definition, then a &lt;i&gt;begin/end&lt;/i&gt; syntax for blocks, or &lt;i&gt;{}&lt;/i&gt; for some parts of the language to define blocks. &lt;i&gt;end, endfunction, endtask&lt;/i&gt;. Just extra details that get in the way of writing clean code the first time.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</summary><category term="verification"></category></entry><entry><title>Improving sshfs connections</title><link href="http://fivecomputers.com/improving-sshfs-connections.html" rel="alternate"></link><updated>2012-02-05T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2012-02-05:improving-sshfs-connections.html</id><summary type="html">&lt;p&gt;I'm finding &lt;a href="http://www.fivecomputers.com/2012/04/sshfs-for-os-x-lion.html"&gt;sshfs&lt;/a&gt; to be excellent for remotely accessing drives over ssh. There's a couple of tweaks to the ssh config file that can make things even better. If you haven't used an ssh config file, it can be used to store general and connection specific information, to save you typing it every time. The file lives in &lt;i&gt;~/.ssh/config&lt;/i&gt;&lt;/p&gt;

&lt;pre&gt;
Host &amp;lt;hostname&amp;gt;

features

Host &amp;lt;otherhostname&amp;gt;

features
&lt;/pre&gt;

&lt;p&gt;e.g.,
&lt;pre&gt;
Host short&lt;/p&gt;
&lt;p&gt;Hostname ssh.long_url_name.com&lt;/p&gt;
&lt;p&gt;Username myusername
&lt;/pre&gt;so, instead of typing &lt;i&gt;ssh myusername@ssh.long_url_name.com&lt;/i&gt; I can instead run the following:
&lt;pre&gt;
ssh short
&lt;/pre&gt;To improve the sshfs you should add&lt;br /&gt;
&lt;pre&gt;
ServerAliveInterval 15 
&lt;/pre&gt;to the Host that you connect over sshfs, which will make sshfs to a ssh keepalive ping every 15 seconds.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Pygmentize files and paste them into Microsoft Word in OS X</title><link href="http://fivecomputers.com/pygmentize-files-and-paste-them-into-microsoft-word-in-os-x.html" rel="alternate"></link><updated>2012-01-05T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2012-01-05:pygmentize-files-and-paste-them-into-microsoft-word-in-os-x.html</id><summary type="html">&lt;p&gt;Writing some documents using Microsoft Word and I wanted to be able to drop in syntax highlighted versions of the source code. Pygmentize will generate RTF format, which is great for pasting in to Word, but you have to get it there. The best way I've found is using the OS X terminal (I like using &lt;a href="http://www.iterm2.com/#/section/home"&gt;iTerm2&lt;/a&gt;). I then use a feature of the command line &lt;i&gt;open&lt;/i&gt; command, which makes it read from &lt;i&gt;stdin&lt;/i&gt; and open the output in TextEdit. This text can then be cut and pasted directly in to Word, preserving all the formatting.&lt;/p&gt;

&lt;p&gt;Run the command:&lt;/p&gt;

&lt;pre&gt;
pygmentize -f rtf &amp;lt;file to highlight&amp;gt; | open -f
&lt;/pre&gt;

&lt;p&gt;Then in the TextEdit window, press&lt;/p&gt;
&lt;div style="display: inline !important;"&gt;
  &lt;i&gt;&lt;span style="font-style: normal;"&gt;⌘&lt;/span&gt;&lt;/i&gt;
&lt;/div&gt;

&lt;p&gt;&lt;i&gt;a&lt;/i&gt;,&lt;/p&gt;
&lt;div style="display: inline !important;"&gt;
  &lt;i&gt;&lt;span style="font-style: normal;"&gt;⌘&lt;/span&gt;&lt;/i&gt;
&lt;/div&gt;

&lt;p&gt;&lt;i&gt;c&lt;/i&gt; to select all and copy it. Switch to Word and hit&lt;/p&gt;
&lt;div style="display: inline !important;"&gt;
  &lt;i&gt;&lt;span style="font-style: normal;"&gt;⌘&lt;/span&gt;&lt;/i&gt;
&lt;/div&gt;

&lt;p&gt;&lt;i&gt;v&lt;/i&gt; to paste.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Simplified VPI iterators using PyHVL generators</title><link href="http://fivecomputers.com/simplified-vpi-iterators-using-pyhvl-generators.html" rel="alternate"></link><updated>2012-01-05T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2012-01-05:simplified-vpi-iterators-using-pyhvl-generators.html</id><summary type="html">&lt;p&gt;I've been using &lt;a href="http://pyhvl.sourceforge.net/"&gt;PyHVL&lt;/a&gt; for a variety of verification tasks in the past few years. PyHVL is an open source Python integration for Verilog and SystemVerilog simulators. To give a quick taste of what it can do for you, consider the following SystemVerilog VPI C code.&lt;/p&gt;

&lt;div class="highlight" style="background: #f8f8f8"&gt;
  &lt;pre style="line-height: 125%"&gt;
&lt;span style="color: #B00040"&gt;void&lt;/span&gt; display_nets(mod)
    vpiHandle mod;
    {
       vpiHandle net;
       vpiHandle itr;
       vpi_printf(&lt;span style="color: #BA2121"&gt;"Nets declared in module %s&lt;/span&gt;&lt;span style="color: #BB6622; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #BA2121"&gt;"&lt;/span&gt;,
       vpi_get_str(vpiFullName, mod));
&lt;/pre&gt;
  &lt;pre style="line-height: 125%"&gt;
       itr &lt;span style="color: #666666"&gt;=&lt;/span&gt; vpi_iterate(vpiNet, mod);
&lt;/pre&gt;
  &lt;pre style="line-height: 125%"&gt;

       &lt;span style="color: #008000; font-weight: bold"&gt;while&lt;/span&gt; (net &lt;span style="color: #666666"&gt;=&lt;/span&gt; vpi_scan(itr))
          {
          vpi_printf(&lt;span style="color: #BA2121"&gt;"&lt;/span&gt;&lt;span style="color: #BB6622; font-weight: bold"&gt;\t&lt;/span&gt;&lt;span style="color: #BA2121"&gt;%s"&lt;/span&gt;, vpi_get_str(vpiName, net));
          &lt;span style="color: #008000; font-weight: bold"&gt;if&lt;/span&gt; (vpi_get(vpiVector, net))
          {
             vpi_printf(&lt;span style="color: #BA2121"&gt;" of size %d&lt;/span&gt;&lt;span style="color: #BB6622; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #BA2121"&gt;"&lt;/span&gt;, vpi_get(vpiSize, net));
          }
          &lt;span style="color: #008000; font-weight: bold"&gt;else&lt;/span&gt; vpi_printf(&lt;span style="color: #BA2121"&gt;"&lt;/span&gt;&lt;span style="color: #BB6622; font-weight: bold"&gt;\n&lt;/span&gt;&lt;span style="color: #BA2121"&gt;"&lt;/span&gt;);
       }
    }
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is the equivalent VPI code, this time written in Python, using PyHVL.&lt;/p&gt;

&lt;div class="highlight" style="background: #f8f8f8"&gt;
  &lt;pre style="line-height: 125%"&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #0000FF"&gt;display_nets&lt;/span&gt;(module):
&lt;/pre&gt;
  &lt;pre style="line-height: 125%"&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;print&lt;/span&gt; &lt;span style="color: #BA2121"&gt;'Nets declared in module'&lt;/span&gt;, get_str(vpiFullName, module) 
&lt;/pre&gt;
  &lt;pre style="line-height: 125%"&gt;
    &lt;span style="color: #008000; font-weight: bold"&gt;for&lt;/span&gt; net &lt;span style="color: #AA22FF; font-weight: bold"&gt;in&lt;/span&gt; vpi_iterator(module, vpiNet):
        &lt;span style="color: #008000; font-weight: bold"&gt;print&lt;/span&gt; &lt;span style="color: #BA2121"&gt;'&lt;/span&gt;&lt;span style="color: #BB6622; font-weight: bold"&gt;\t&lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%s&lt;/span&gt;&lt;span style="color: #BA2121"&gt; &lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%s&lt;/span&gt;&lt;span style="color: #BA2121"&gt;'&lt;/span&gt; &lt;span style="color: #666666"&gt;%&lt;/span&gt; ( get_str(vpiName, net), 
                get(vpiVector, net) &lt;span style="color: #AA22FF; font-weight: bold"&gt;and&lt;/span&gt; &lt;span style="color: #BA2121"&gt;'of size &lt;/span&gt;&lt;span style="color: #BB6688; font-weight: bold"&gt;%d&lt;/span&gt;&lt;span style="color: #BA2121"&gt;'&lt;/span&gt; &lt;span style="color: #666666"&gt;%&lt;/span&gt; get(vpiSize, net) &lt;span style="color: #AA22FF; font-weight: bold"&gt;or&lt;/span&gt; &lt;span style="color: #BA2121"&gt;''&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The magic happens in the implementation of the &lt;i&gt;vpi_iterator()&lt;/i&gt; method, which uses a Python &lt;i&gt;yield&lt;/i&gt; instruction to turn the method into a generator. &lt;a href="http://wiki.python.org/moin/Generators"&gt;Generators&lt;/a&gt; are much like functions, except they maintain a frozen stack frame, at the point where the &lt;i&gt;yield&lt;/i&gt; occurs. All existing variables within the method maintain their state and execution picks up where it left off, just after the &lt;i&gt;yield&lt;/i&gt;. The example also uses lazy evaluation of the result of &lt;i&gt;get(vpiVector, net)&lt;/i&gt; to either call &lt;i&gt;get(vpiSize, net)&lt;/i&gt; or not print the &lt;i&gt;'of size&lt;/i&gt;' additional string.&lt;/p&gt;

&lt;div class="highlight" style="background: #f8f8f8"&gt;
  &lt;pre style="line-height: 125%"&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;def&lt;/span&gt; &lt;span style="color: #0000FF"&gt;vpi_iterator&lt;/span&gt;(handle, &lt;span style="color: #008000"&gt;type&lt;/span&gt;&lt;span style="color: #666666"&gt;=&lt;/span&gt;vpiNet):
    iterator &lt;span style="color: #666666"&gt;=&lt;/span&gt; iterate(&lt;span style="color: #008000"&gt;type&lt;/span&gt;, handle)
    &lt;span style="color: #008000; font-weight: bold"&gt;if&lt;/span&gt; iterator:
        handle &lt;span style="color: #666666"&gt;=&lt;/span&gt; scan(iterator)
        &lt;span style="color: #008000; font-weight: bold"&gt;while&lt;/span&gt; handle:
            &lt;span style="color: #008000; font-weight: bold"&gt;yield&lt;/span&gt; handle
            handle &lt;span style="color: #666666"&gt;=&lt;/span&gt; scan(iterator)

&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This lets you write loops &lt;i&gt;inside out&lt;/i&gt; as one of my colleagues aptly put it. The outcome is you can simplify the management of loops and indices and focus on the point of the loop. You write less code, you introduce fewer bugs. The code is easier to read and maintain as a result. This is just a very small example of some of the power of using a modern scripting language like Python, as an adjunct to a SystemVerilog simulator.&lt;/p&gt;

&lt;p&gt;If you spend much time writing VPI code, you should take a look at PyHVL. It could make your life much simpler, or get in touch and I can help you with it.&lt;/p&gt;</summary><category term="software"></category><category term="verification"></category></entry><entry><title>csv the easy way</title><link href="http://fivecomputers.com/csv-the-easy-way.html" rel="alternate"></link><updated>2011-01-23T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2011-01-23:csv-the-easy-way.html</id><summary type="html">&lt;p&gt;I've recently started using &lt;a href="http://fogcreek.com/"&gt;FogCreek's&lt;/a&gt; &lt;a href="http://www.fogcreek.com/FogBugz/"&gt;FogBugz&lt;/a&gt; project hosting for a small personal project. It has a built-in Mercurial source repository, with some enhancements, called Kiln, and good task/ project tracking features. Quite similar to those you find in &lt;a href="http://trac.edgewall.org/"&gt;Trac&lt;/a&gt;. Rather than putting together the various servers to track my own project, I figured I might as well use what they give away for free, for small project teams. I had a list of tasks that I wanted to import into the FogBugz task list, from a CSV file. In fact, this was a CSV file I'd exported from a different FogBugz site, but it could well have been any list of comma seperated values holding task information. The trick was how to get that information from my computer onto the FogBugz site. They didn't have any obvious CSV import option, but they do publish an XML API. Luckily enough, there is also a set of &lt;a href="https://our.fogbugz.com/default.asp?W1048"&gt;python bindings around the API&lt;/a&gt;. Amazingly enough, I was able to open and read the CSV file, parse it, login in to my FogBugz account and upload the new tasks to the server with just this little snippet of code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;div class="highlight"&gt;
  &lt;pre&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fogbugz&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FogBugz&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="n"&gt;fb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FogBugz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://my_site.fogbugz.com/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# URL is to your FogBugz install&lt;/span&gt;
&lt;span class="n"&gt;fb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_login@my.site.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Filter.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;
    &lt;span class="n"&gt;fb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sCategory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sTitle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sPriority&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;span class="n"&gt;fb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logoff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;Pretty cool if you ask me! Quick and dirty, throwaway code, but so powerful for so few lines.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;</summary><category term="software"></category></entry><entry><title>creating a codeswarm movie</title><link href="http://fivecomputers.com/creating-a-codeswarm-movie.html" rel="alternate"></link><updated>2009-08-04T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2009-08-04:creating-a-codeswarm-movie.html</id><summary type="html">&lt;p style="text-align: center;"&gt;&lt;a href="http://www.flickr.com/photos/52043707@N00/3423187687/"&gt;&lt;img src="http://farm4.static.flickr.com/3631/3423187687_4a8a94a5bd.jpg" height="375" width="500" alt="code swarm frame" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p style="text-align: center;"&gt;&lt;a href="http://www.mcgregorphoto.com/pub/svipcodeswarm.mpg"&gt;Download video (3Mb)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A codeswarm is a visualization of the activity within a source code repository. The image and linked video above shows the lifetime of one of &lt;a href="http://www.verilab.com" title="Verilab, Inc."&gt;Verilab's&lt;/a&gt; source repositories. You can see code being created, the check-ins as they happen and an indication of which users are doing the work at any given time. It is an example of an &lt;em&gt;'&lt;/em&gt;&lt;a href="http://www.benfry.com"&gt;&lt;em&gt;organic information visualization&lt;/em&gt;&lt;/a&gt;' and is created using the &lt;a href="http://processing.org/"&gt;Processing&lt;/a&gt; toolkit. The original visualization tools were developed by &lt;a href="http://vis.cs.ucdavis.edu/~ogawa/codeswarm/"&gt;Michael Ogawa&lt;/a&gt; and the &lt;a href="http://code.google.com/p/codeswarm/"&gt;source code is available on Google code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this particular case I created the animation on OS X 10.5, using a combination of codeswarm, ffmpeg and LAME. If you are interested in doing something like this yourself:&lt;/p&gt;

&lt;p&gt;First you'll need to make sure you have a recent version of the Java Development Kit installed (JDK 1.5 or later). You'll also need a recent version of Ant installed. (I have version 1.7.0, which ships with OS X as default). Download the code_swarm source and install it. Then execute '&lt;em&gt;ant run&lt;/em&gt;'. If all is well, you should get a dialog box prompting you for the source repository, user name and password.&lt;/p&gt;

&lt;p&gt;At this point, I put in the svn+ssh URL for the Verilab repository that I wanted to visualize. Everything fell over, with a Java error (NoClassDefFoundError within com/trilead/ssh2). From this I realised I needed to install the SSH libraries for &lt;a href="http://www.trilead.com/Products/Trilead_SSH_for_Java/"&gt;Java, from Trilead&lt;/a&gt;. I downloaded those, unpacked them and added the &lt;em&gt;jar&lt;/em&gt; file to my CLASSPATH. Along the way I found out the default OS X CLASSPATH definition is in &lt;em&gt;/System/Library/Java/JavaConfig.plist&lt;/em&gt; which may be useful as a starting point.&lt;/p&gt;

&lt;p&gt;With that fixed, I again ran '&lt;em&gt;ant run&lt;/em&gt;' and put in the relevant information. A bit of time passes as the checkin information is extracted from the repository, then the visualisation runs. You'll find that repository information that was extracted is saved, under the ./data directory (look for the latest realtime_sample.*.xml file) . This is useful for the next stages, as you don't have to fetch the information again. If you want to create a video of the visualisation, there are a few more hoops to jump through.&lt;/p&gt;

&lt;p&gt;You will need to configure codeswarm to save the frames for each stage of the visualisation. You do this by editing the &lt;em&gt;./data/sample.config&lt;/em&gt; file. First off, copy it to a new version for your particular project. Then edit these values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;InputFile= [Point it at the new realtime_sample&amp;lt;number&amp;gt;.xml file in the data directory, that contains the checkin information for your project]&lt;/li&gt;

  &lt;li&gt;TakeSnapshots=true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all you really need to change. You can also change the other values, to alter the visualisation. The ColorAssignX= statements use regexp values to differentiate different types of checkin and colour code them accordingly. Play around with the other values, with TakeSnapshots set to false and re-run the visualisation until you get something you are satisfied with. Then run one more time with TakeSnapshots=true to save off the frame images. You can run with the new configuration by running '&lt;em&gt;ant run data/your_project.config'&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After running with TakeSnapshots enabled, you'll have a set of images in the ./frames directory, (controlled by the SnapshotLocation option in the config file). The final step is to assemble those into a movie. The easiest way I found to do this is to use the command-line utility, ffmpeg. There are a variety of ways to install ffmpeg, but the simplest way seems to be to install &lt;a href="http://homepage.mac.com/major4/"&gt;ffmpegX&lt;/a&gt; and &lt;a href="http://www.macosxhints.com/article.php?story=20061220082125312"&gt;then extract the binary&lt;/a&gt; from the application bundle. You can also get it using &lt;a href="http://www.finkproject.org/"&gt;Fink&lt;/a&gt; or &lt;a href="http://www.macports.org/"&gt;MacPorts&lt;/a&gt;. If you want to use an audio track with your visualisation, you will also probably require &lt;a href="http://lame.sourceforge.net"&gt;LAME&lt;/a&gt;. With ffmpeg working, it is simple to point it towards the image files from codeswarm and produce the final movie. The finishing touch was adding some music from an mp3 file, then limiting the duration via the -t switch, to end when the video frames ran out, rather than playing all of the music.&lt;/p&gt;

&lt;p&gt;ffmpeg -i frames/code_swarm-%05d.png -i 6_sym.mp3 -qmax 15 -t 100 -f image2 -r 24 &amp;lt;output_filename&amp;gt;.mpg&lt;/p&gt;

&lt;p&gt;You can run 'ffmpeg' without any switches to get help on the options. If all goes well, you should end up with an MPEG format video in the file &amp;lt;output_filename&amp;gt;.mpg.&lt;/p&gt;

&lt;div class="posttagsblock"&gt;&lt;a href="http://technorati.com/tag/OSX" rel="tag"&gt;OSX&lt;/a&gt;, &lt;a href="http://technorati.com/tag/visualisation" rel="tag"&gt;visualisation&lt;/a&gt;&lt;/div&gt;</summary><category term="software"></category><category term="verification"></category></entry><entry><title>iPhone development</title><link href="http://fivecomputers.com/iphone-development.html" rel="alternate"></link><updated>2009-08-04T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2009-08-04:iphone-development.html</id><summary type="html">&lt;p style="text-align: center;"&gt;&lt;a href="http://www.flickr.com/photos/52043707@N00/3424097092/"&gt;&lt;img src="http://farm4.static.flickr.com/3305/3424097092_1811e15916.jpg" height="500" width="266" alt="iPhone Simulator" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Interested in learning about iPhone development? Want to study at Stanford? Don't want to pay the tuition fees? On &lt;a href="http://deimos3.apple.com/WebObjects/Core.woa/Browse/itunes.stanford.edu.2024353965.02024353968"&gt;iTunesU&lt;/a&gt; (the lecture streaming part of iTunes) you can follow along with &lt;a href="http://www.stanford.edu/class/cs193p/cgi-bin/index.php"&gt;class cs193p&lt;/a&gt; from Stanford, on iPhone Application Development. In addition to the good quality video of the lectures, all of the class slides, handouts and assignments &lt;a href="http://www.stanford.edu/class/cs193p/cgi-bin/downloads.php"&gt;are available&lt;/a&gt;, for free. If you have an Intel Mac, you can also download the &lt;a href="http://developer.apple.com/TOOLS/xcode/"&gt;development tools&lt;/a&gt;, &lt;a href="http://developer.apple.com/iphone/"&gt;iPhone SDK and a simulator&lt;/a&gt;, again all free. If you do want to actually develop and test applications on an iPhone or iPod Touch, you'll need to pay the $99 developer fee to get the encryption keys that let you run applications on a phone and allows you to submit apps for the app store. At least for the basics, the simulator is useful as a target platform for testing, although there are differences between it and the final platform. (features such as multi-touch and the accelerometer are hard to test for example, unless you want to start shaking your computer).&lt;/p&gt;

&lt;p&gt;Lifehacker recently &lt;a href="http://lifehacker.com/software/education/technophilia-get-a-free-college-education-online-201979.php"&gt;had an article&lt;/a&gt; on all of the educational resources that are becoming available on the web, for free. iTunesU is a good example of the sort of teaching resources that are out there, if you look. The quality is variable, but there are some excellent resources if you are prepared to dig.&lt;/p&gt;

&lt;div class="posttagsblock"&gt;&lt;a href="http://technorati.com/tag/OSX" rel="tag"&gt;OSX&lt;/a&gt;&lt;/div&gt;</summary><category term="software"></category><category term="web/tech"></category></entry><entry><title>learning guitar with Garageband</title><link href="http://fivecomputers.com/learning-guitar-with-garageband.html" rel="alternate"></link><updated>2009-07-11T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2009-07-11:learning-guitar-with-garageband.html</id><summary type="html">&lt;p&gt;&lt;img src="http://fivecomputers.typepad.com/.a/6a00e54efca38e88340128756200ad970c-pi" width="883" height="149" alt="rocky_racoon.band.jpg" style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px;" /&gt;&lt;br /&gt;
&lt;p&gt;I've just recently started trying to learn to play guitar. My early experiences with music would be best described as making a bad noise,on the recorder. Still, I've decided to give it another go. One thing I've found early on that playing along to a metronome really helps with keeping time, but it isn't the most interesting thing to listen to. To liven things up a little, I've been playing around with Garageband on my Mac. This is an application that comes with the iLife suite and is preinstalled on most mac's. I suspect many owners don't use it for much, other than maybe making the odd iPhone ringtone (&lt;a href="http://lifehacker.com/334073/create-custom-iphone-ringtones-the-free-and-apple-way"&gt;you can make them for free with Garageband, rather than paying money to get them in iTunes&lt;/a&gt;). Garageband also comes with several free lessons built in that are useful, if a bit limited. I've been using it mostly to record my practices and provide backing rhythm for my practice time.&lt;/p&gt;
&lt;p&gt;Instead of playing along to the metronome, I've been making up &lt;a href="http://en.wikipedia.org/wiki/Click_track"&gt;click tracks&lt;/a&gt; to play to. These are simple drum loops that I use as a backing beat. It is easy to change the tempo of the drum beat and make it loop indefinitely. I've found &lt;a href="http://www.thegaragedoor.com/tutorials/clicktracks.html"&gt;free loops&lt;/a&gt; and there are also several vanilla loops that ship with GarageBand that are useful for click tracks (such as Straight Up Beat 01). I just choose the one that has the closest feel to the rhythm I'm trying to play, then drag the loop into the main display. You can extend the loop by dragging the top right hand corner of the track out to the right. After that is done, set a cycle region to loop over the number of bars that you want it to play for and play along.&lt;/p&gt;
&lt;p&gt;One of the nicest features of Garageband is the ability to retime any of the loops to a given tempo, so I can start out slow and build to a faster beat, without having to change the basic arrangements of backing tracks. I can add more software instruments as I go, but for now I've been keeping things quite simple. I have played some of the melodies on the musical score editor, so that I can hear how things should sound and have that playing quietly under the track as I play along. You can also drag in tunes straight from iTunes and have those as backing tracks as well. These can also be retimed and slowed down (&lt;a href="http://www.officecafe.com/blog/2009/01/using-garageband-to-transpose-a-song-imported-from-itunes/"&gt;control-option-G is the secret undocumented&lt;/a&gt; shortcut you'll need)&lt;/p&gt;
&lt;p&gt;&lt;img src="http://fivecomputers.typepad.com/.a/6a00e54efca38e88340120a6613708970b-pi" width="569" height="310" alt="System-2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;This has been helpful so far. I've also started recording my attempts on a separate track (I've got an acoustic-electric guitar, so I can hook it straight into the computer). Listening to it I can hear the mistakes, but I can also pull up waveforms and visually see just where and when I was off beat. That's helped me start to tighten things up. I've been impressed by the features available in this free suite of tools. Certainly not as all encompassing as &lt;a href="http://www.apple.com/logicstudio/"&gt;Logic Studio&lt;/a&gt; or Pro Tools, but more than I need to be able to help me learn more quickly.&lt;/p&gt;
&lt;p&gt;After a few days of this, I realised the biggest problem was having to hit a key to start things recording, then quickly grab the guitar and get ready to play. Garageband will provide a 4 beat count in, but that isn't really enough for me to get ready and away from the keyboard. I found an interesting solution, where I worked out how to use my iPhone to remotely control GarageBand, using the Open Sound Control protocol and some free GUI creation tools and a bit of python scripting. More about that later.&lt;/p&gt;&lt;/p&gt;
&lt;div class="posttagsblock"&gt;&lt;a href="http://technorati.com/tag/OSX" rel="tag"&gt;OSX&lt;/a&gt;&lt;/div&gt;</summary><category term="music"></category></entry><entry><title>a real, working time machine</title><link href="http://fivecomputers.com/a-real-working-time-machine.html" rel="alternate"></link><updated>2009-05-08T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2009-05-08:a-real-working-time-machine.html</id><summary type="html">&lt;p&gt;Was working on some files on my mac last night, editing photographs from a recent trip. It was getting late and I accidentally deleted a directory of images. Now my images are always backed up anyway, on a separate attached storage device, so this wasn't too big of a mistake. There's another copy of the same images on some DVDs, too. But it still would have taken time to go and find them and recovery the images. I'd also have lost the various edits I'd done over the last few hours. Annoying, certainly, but not fatal. However, this is a mac, and I've been running time machine to do automatic backups, to a cheap, 1Tb USB drive I have attached to the machine. It took me about 30 seconds to unroll the damage using that, via the nifty graphical interface. I lost about 10 minutes of work in total. I was impressed by how well it works, much like the daily and hourly .snapshots you get with a much more expensive netapp filer. Seems to have been done right.&lt;/p&gt;

&lt;div class="posttagsblock"&gt;&lt;a href="http://technorati.com/tag/geekery" rel="tag"&gt;geekery&lt;/a&gt;, &lt;a href="http://technorati.com/tag/OSX" rel="tag"&gt;OSX&lt;/a&gt;, &lt;a href="http://technorati.com/tag/photography" rel="tag"&gt;photography&lt;/a&gt;&lt;/div&gt;</summary><category term=""></category></entry><entry><title>what did you say?</title><link href="http://fivecomputers.com/what-did-you-say.html" rel="alternate"></link><updated>2009-04-30T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2009-04-30:what-did-you-say.html</id><summary type="html">&lt;div style="text-align: center;"&gt;
  &lt;a href="http://www.wordle.net/gallery/wrdl/799366/Gordon%27s_tweets" title="Wordle: Gordon's tweets"&gt;&lt;img src="http://fivecomputers.typepad.com/.a/6a00e54efca38e883401156f6c5ebd970c-pi" width="700" height="319" alt="Wordle - Gordon_s tweets-1.jpg" /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;I've been poking around at the &lt;a href="http://apiwiki.twitter.com/Twitter-API-Documentation"&gt;Twitter API&lt;/a&gt;, in part just out of curiosity about what features are exposed. I have an interest in writing some visualisation widgets based upon it. The iPhone development course is also using a Twitter client as something of a 'hello world' app, too. Today, Tim O'Reilly pointed to a &lt;a href="http://radar.oreilly.com/2009/04/wordle-visualization-timoreilly-tweetstream.html"&gt;wordle visualisation&lt;/a&gt; of all the things that he's tweeted and &lt;a href="http://code.activestate.com/recipes/576594/"&gt;gave a link&lt;/a&gt; to some code that could be used to download everything you'd tweeted. I had a look at it and decided to write something similar, using the Twitter API directly, rather than scraping the Twitter site.&lt;/p&gt;

&lt;p&gt;The Twitter API I've been using is the excellent, minimalist &lt;a href="http://mike.verdone.ca/twitter/"&gt;python twitter tools&lt;/a&gt; by Mike Verdone. The main advantage over other python Twitter APIs is that ptt doesn't redefine any of the API calls. It does exactly what it says in the published &lt;a href="http://apiwiki.twitter.com/Twitter-API-Documentation"&gt;Twitter API&lt;/a&gt;. As a result, it is incredibly easy to use. The 100 or so lines it is implemented in are also a very instructive read, to &lt;a href="http://github.com/sixohsix/twitter/blob/ea668dec2e122000b0025a8cfc02c860388f621d/twitter/api.py"&gt;see how it is put together&lt;/a&gt;. I think it is a great example of how the attributes in Python can be used.&lt;/p&gt;

&lt;p&gt;The code I wrote is &lt;a href="http://www.mcgregorphoto.com/pub/what_did_you_say.py.txt"&gt;available for download&lt;/a&gt;. It respects the rate limiting imposed by Twitter and will output all of the tweets for a particular user, to a file called &amp;lt;username&amp;gt;.tweet in the file it is run from. You can change which users are fetched in the main() ftn. The resulting text file can be opened up and then copy/ pasted over into the &lt;a href="http://www.wordle.net/create"&gt;wordle creator.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class="posttagsblock"&gt;&lt;a href="http://technorati.com/tag/geekery" rel="tag"&gt;geekery&lt;/a&gt;, &lt;a href="http://technorati.com/tag/Twitter" rel="tag"&gt;Twitter&lt;/a&gt;, &lt;a href="http://technorati.com/tag/visualisation" rel="tag"&gt;visualisation&lt;/a&gt;&lt;/div&gt;</summary><category term="current affairs"></category><category term="software"></category></entry><entry><title>dd-wrt</title><link href="http://fivecomputers.com/dd-wrt.html" rel="alternate"></link><updated>2009-04-26T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2009-04-26:dd-wrt.html</id><summary type="html">&lt;p&gt;&lt;img src="http://farm4.static.flickr.com/3612/3476627038_8aab2a0db9.jpg" width="480" height="448" alt="dd-wrt" /&gt;&lt;/p&gt;

&lt;p&gt;Just installed &lt;a href="http://www.dd-wrt.com/dd-wrtv3/index.php"&gt;dd-wrt&lt;/a&gt; on my Linksys wrt54g wireless router. I'd been meaning to do this for a while - as an easy way to get a much more functional router than the default firmware shipped by Linksys. What finally motivated me to do it was the recent storm about Time Warner Cable introducing &lt;a href="http://austinist.com/2009/04/16/time_warners_consumption_based_bill.php"&gt;bandwidth caps in Austin&lt;/a&gt;. Although TWC seem to have backed down for the moment, they have also recently started &lt;a href="http://tech.slashdot.org/article.pl?sid=09/04/25/1237215&amp;amp;from=rss"&gt;disconnecting customers for 'using too much bandwidth'&lt;/a&gt; on their infinite bandwidth contracts. The DD-WRT firmware gives me an independent way to monitor my usage and get an idea of how much I typically transmit &amp;amp; receive.&amp;nbsp;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The DD-WRT firmware install wasn't quite as smooth as the documentation might make you believe. The first time I installed and then tried to update the firmware, I got a fairly unhelpful 'Error 2: Access violation' error from the tftp prompt and not much else. I went back through the management mode initial vxkiller upload and things seemed to work better the second time around. For a while I was worried that I had a brick of router.&lt;/p&gt;

&lt;p&gt;Once back up and running, the settings were very similar to the previous Linksys options, so it was quite quick to get the wireless settings and port forwarding, DMZ etc that I was using previously reconfigured. Now I have historical and realtime graphs of bandwidth usage available. Should be interesting to be able to monitor what's going on. If they are cutting people off for using 44GB per week and saying that is &lt;em&gt;“that is more than most people use in a year”&lt;/em&gt; I am a little concerned at my 7.2GB in one day. That was a few &lt;a href="http://www.stanford.edu/class/cs193p/cgi-bin/index.php"&gt;iPhone development videos from Stanford&lt;/a&gt; and then we watched &lt;a href="http://www.imdb.com/title/tt0830515/"&gt;Quantum of Solace&lt;/a&gt; last night on the Xbox. Seems like Time Warner consider that aberrant behaviour.&lt;/p&gt;

&lt;div class="posttagsblock"&gt;&lt;a href="http://technorati.com/tag/thingumyjigs" rel="tag"&gt;thingumyjigs&lt;/a&gt;, &lt;a href="http://technorati.com/tag/visualisation" rel="tag"&gt;visualisation&lt;/a&gt;, &lt;a href="http://technorati.com/tag/geekery" rel="tag"&gt;geekery&lt;/a&gt;&lt;/div&gt;</summary><category term="current affairs"></category><category term="thingumyjigs"></category></entry><entry><title>the death of books</title><link href="http://fivecomputers.com/the-death-of-books.html" rel="alternate"></link><updated>2009-02-23T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2009-02-23:the-death-of-books.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.flickr.com/photos/52043707@N00/2331801711/"&gt;&lt;img src="http://farm3.static.flickr.com/2050/2331801711_07616a0808.jpg" height="500" width="429" alt="ghost rider" /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;blockquote&gt;
  &lt;p style="text-align: center;"&gt;&lt;em&gt;The reports of my death are greatly exaggerated&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;p style="text-align: right;"&gt;&lt;span style="font-size: 10px;"&gt;- Mark Twain&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;It seems that &lt;a href="http://www.npr.org/templates/story/story.php?storyId=99961163&amp;amp;ft=1&amp;amp;f=1003"&gt;some universities&lt;/a&gt; are moving away from physical books, switching entirely to electronic textbooks. My initial reaction is that this is just a little bit crazy. Electronic reference materials have a place, but I have a real difficulty with only electronic textbooks as being the best approach. Certainly there is a financial justification and a reduction in the physical weight the students have to carry. There is no doubt an advantage for the book stores, having to carry less physical inventory and ship it around the country.&lt;br /&gt;
&lt;br /&gt;
But none of this takes into account how you interact with a physical book. It just isn't the same having the material online or on a PDF in a laptop. A screen is harder to read (a good laptop screen is still less than 100dpi, books and print are 300dpi or more) and as it is a lower resolution than printed material, you can only see a small amount of the information at a time. Diagrams and accompanying text are often hard to see all in one place. This is part of the reason why reading on a screen can be so tiring. Also the backlit text is harder on the eyes than reading from a page. The second drawback is how you physically interact with a book - flicking quickly through pages, marking pages with a highlighter, inserting post-it notes, curling up in a chair to read a book, spreading several books and notes out across a table. All of these metaphors may eventually be replaced with digital analogues that are as powerful or more so, but it seems we are quite far from that time.&lt;br /&gt;
&lt;br /&gt;
The Amazon Kindle is probably about as good as this gets just now and from what I can tell, it still falls far below a good hunk of printed tree. The Kindle does have a higher resolution screen, which helps with reading for a long time, but the screen is small and the navigation feels clunky. Laptops are worse.&lt;br /&gt;
&lt;br /&gt;
I do find a lot of value in online reference books. I've had a subscription to &lt;a href="http://my.safaribooksonline.com/"&gt;O'Reilly's Safari&lt;/a&gt; for over a year now and have found it to be invaluable, particularly when traveling. I can have access to a variety of reference texts, easily searchable, almost always available (if you have an internet connection). However, I've never been able to read any of the books I &lt;a href="http://my.safaribooksonline.com/"&gt;have on my Safari subscription&lt;/a&gt;, for more than a few pages. It just doesn't seem to work for me. No doubt I'm destined to become a relic in my views on reading, but it seems that we &lt;a href="http://www.jmcolberg.com/weblog/2009/02/is_providing_access_enough.html"&gt;approach reading on a screen&lt;/a&gt; differently to a book. I'd love to have some sort of larger Kindle device, linked to a Safari subscription. Some way to really read those books on Safari, rather than just treating them as reference works. It always feels that this is just right around the corner, yet we never quite get there.&lt;/p&gt;</summary><category term="books"></category></entry><entry><title>edward tufte and presenting data</title><link href="http://fivecomputers.com/edward-tufte-and-presenting-data.html" rel="alternate"></link><updated>2009-02-16T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2009-02-16:edward-tufte-and-presenting-data.html</id><summary type="html">&lt;p style="text-align: center;"&gt;&lt;a href="http://www.flickr.com/photos/52043707@N00/3171697571/"&gt;&lt;img src="http://farm2.static.flickr.com/1065/3171697571_bf6e359fff.jpg" height="333" width="500" alt="me" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I was lucky enough to attend a seminar from &lt;a href="http://www.edwardtufte.com/tufte/"&gt;Edward Tufte&lt;/a&gt;, a couple of weeks ago, on the &lt;a href="http://www.edwardtufte.com/tufte/courses"&gt;Presentation of Data and Information&lt;/a&gt;. Edward Tufte is probably best known for the book '&lt;em&gt;&lt;a href="http://www.edwardtufte.com/tufte/books_vdqi"&gt;The Quantitative Display of Visual Information&lt;/a&gt;&lt;/em&gt;' and was an engaging and entertaining presenter. He has a very different style from the normal Powerpoint-driven presentation approach. In fact, much of his work is railing against the uses and abuses of Powerpoint and similar slide techniques.&lt;/p&gt;

&lt;p&gt;The main take-away I got from the whole day was that if you have to communicate complicated data sets or information, that you really need to consider how people will use and interact with the data first. Too often, we go straight to presentation software and start trying to work out how to express the information in slides, rather than taking the time to consider if there are other, better ways to impart the information. Tufte was very keen on the concept of a 'super-graphic' which is a data rich, high resolution physical handout that lets participants see and consider a lot of data at once. A map is a great example of a super-graphic, or the weather page in a typical newspaper. A key part of this is that paper is much higher resolution than a typical computer screen (72dpi to 600dpi means you can show a whole lot more data in the same space). This is why multiple display screens are really useful for serious work. It also means that printing out and sharing data is a great way to get information infront of people in a meeting, rather than drip feeding it from slides)&lt;/p&gt;

&lt;p&gt;I compare this idea to another guide I saw in the same week on creating powerpoint presentations that admonishes that there should never be more than 8 numbers on any slide or graphic. Tufte's response to this was repeatedly '&lt;em&gt;when did we become so stupid, just because we walked into a business meeting?&lt;/em&gt;' People handle large, complex data displays every day in the real world. People read and study sports scores in a newspaper, or financial reports without any trouble at all.&lt;/p&gt;

&lt;p&gt;Let the data drive the presentation format, rather than the presentation software drive how the data is displayed.&lt;/p&gt;</summary><category term="books"></category><category term="software"></category></entry><entry><title>stop &amp; search</title><link href="http://fivecomputers.com/stop-search.html" rel="alternate"></link><updated>2009-02-16T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2009-02-16:stop-search.html</id><summary type="html">&lt;p style="text-align: center;"&gt;&lt;a href="http://www.flickr.com/photos/52043707@N00/3273528803/"&gt;&lt;img src="http://farm4.static.flickr.com/3477/3273528803_32f5d4ac34.jpg" height="500" width="375" alt="a cold day in London" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;One of the least enjoyable experiences on a recent trip to London, last week, happened while I was taking pictures of the London eye. I was standing a few hundred meters away, shooting with a normal point and shoot camera, just like all the people around me, when a couple of police officers approached me. &lt;a href="http://www.guardian.co.uk/commentisfree/libertycentral/2009/jan/19/stop-and-search-civil-liberties-law"&gt;I'd heard about photographers being hassled in London&lt;/a&gt; but was surprised this managed to happen to me within 48 hours of arriving in the city. They started out by saying that '&lt;em&gt;they didn't really believe I was a terrorist, but were stopping photographers to make people aware that they were watching what was going on&lt;/em&gt;'. From there, they handed me a form that listed my rights under section s44 of the anti-terrorism law then proceeded to question me about what I was doing, where I was from, why I was taking pictures.&lt;/p&gt;

&lt;p&gt;As far as I can tell, even though they themselves said they have no reasonable clause, &lt;a href="http://www.theregister.co.uk/2009/01/26/met_so44_touchy_feely/"&gt;the Terrorism act says that's fine&lt;/a&gt;. We spent about 5 minutes going through where I've lived and having me justify why I take pictures. Then they wanted to see all the pictures I'd been taking (again, as far as I can tell, in contradiction of their own guidelines on collection of evidence). On looking through the images, one of the officers stated that '&lt;em&gt;those look just like the sorts of pictures a terrorist would take&lt;/em&gt;' and then told me to move on. The picture above is what I was taking, when the stopped me. I got a '&lt;em&gt;stop and search&lt;/em&gt;' form listing that the stop was authorised under the anti-terrorism laws and that was part of a '&lt;em&gt;pre-planned op&lt;/em&gt;'. I can only assume from that they the London police have decided to institutionalise harassing photographers for the sake of &amp;nbsp;&amp;nbsp;&lt;a href="http://www.schneier.com/blog/archives/2006/08/terrorism_secur.html"&gt;security theatre&lt;/a&gt;. Particularly, if when they find images that they think would be typical terrorist images, they wave the photographer on.&lt;/p&gt;

&lt;p&gt;This is all in a city that seems to have more CCTV cameras everywhere than there are people. I'm not quite sure who if anyone is actually watching these camera feeds. The whole thing is quite worrying, for someone who has been out of the UK for a few years. We used to &lt;a href="http://vids.myspace.com/index.cfm?fuseaction=vids.individual&amp;amp;videoid=6914184"&gt;make jokes&lt;/a&gt; about books like &lt;em&gt;1984&lt;/em&gt; or movies like &lt;em&gt;V for Vendetta&lt;/em&gt; but it seems that piece by piece typical rights to privacy are being whittled away by a government that is using good intentions to grab as much additional powers as possible. Sure, it is just hassling a photographer in the street, taking pictures of a tourist attraction for no reason, but each time has an increasing chilling effect on what people feel they can do and what government authorities can get away with doing. I didn't argue with the particular officers, mainly as I didn't want to spend half my day discussing it in a police station on my holiday. Maybe that's part of the problem too.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;'There's an implicit admission that Section 44 stops and searches do not detect terrorists. This is borne out by the available data. In the financial years 2003/4 to 2006/7, the Met stopped and searched 31,797 pedestrians using the powers of Section 44(2); of these only 79 were arrested in connection with terrorism - less than a quarter of a percent - and even fewer will be convicted. The purpose of deterring is feeble considering the extent to which the Home Office is ready to go to avoid revealing when and where the exceptional powers for Section 44 apply.'&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At the end of this five minute waste of time, they started asking me about the number of megapixels my camera had, commented on how impressed they were by the quality of the pictures on the screen and asked where they could buy one and if I'd recommend it.&lt;/p&gt;</summary><category term="current affairs"></category><category term="thingumyjigs"></category><category term="travel"></category></entry><entry><title>maker's schedule, manager's schedule</title><link href="http://fivecomputers.com/makers-schedule-managers-schedule.html" rel="alternate"></link><updated>2009-01-08T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2009-01-08:makers-schedule-managers-schedule.html</id><summary type="html">&lt;p&gt;I've always had a dread of mid-afternoon status meetings. Now maybe I understand it a bit better, because of Paul Graham's excellent essay on the difference between &lt;a href="http://www.paulgraham.com/makersschedule.html"&gt;being on a maker's schedule and being on a manager's schedule&lt;/a&gt;. Seems to share a lot of ideas with Csikszentmihalyi and his ideas of creativity and flow states.&lt;/p&gt;</summary><category term="eda"></category><category term="film"></category><category term="software"></category></entry><entry><title>flock together</title><link href="http://fivecomputers.com/flock-together.html" rel="alternate"></link><updated>2008-12-06T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-12-06:flock-together.html</id><summary type="html">&lt;p&gt;&lt;a title="flamingos by Gordon McGregor, on Flickr" href="http://www.flickr.com/photos/mcgregorphoto/1219954136/"&gt;&lt;img alt="flamingos" src="http://farm2.static.flickr.com/1405/1219954136_fc45212560.jpg" /&gt;&lt;/a&gt;

&lt;/p&gt;

&lt;p&gt;Attended the &lt;a href="http://www.coolverification.com/2008/03/blogging-birds.html"&gt;blogging Birds of Feather&lt;/a&gt; session at DAC, last evening. I was quite amazed at the number of people who showed up. I had expected there to be half a dozen people and not much interest. Instead, more chairs had to be brought in and in the end about 40 people showed up, with many traditional journalists and bloggers in attendance. The discussion was lively and spirited. &lt;/p&gt;

&lt;p&gt;One of the main themes was confusion over just what blogging is and how it should fit in to the more traditional roles of the press and marketing with the EDA world. Some of the discussion revolved around trying to classify just what a blog is or isn't and how it differs from columns, marketing or opinion pieces. To me this seems a mostly futile debate or perhaps one that stems from a lack of real understanding on what the medium is about. Really all a blog is is a way of having a somewhat one-sided or asymmetric conversation. The classification or editorial style then comes from the person who runs the blog. Columns, &lt;a href="http://stephenfry.com/blog/"&gt;blessays&lt;/a&gt;, technical paper sources, marketing fluff pieces, lunchable debates, it is all blogging and reflects the writer of the blog. At the lowest level, a blog is really just an easy mechanism to publish on-line. Everything else becomes an issue of personal approach, rather than definition over the technical nature of the communications medium.&lt;/p&gt;

&lt;p&gt;There was also quite a bit of concern over editorial control and company influence. Certainly it is clear that one of the main differences that a blog has over what has gone before is the democratization of content creation. The barriers to entry have been stripped away and anyone with something to say can start saying it. It is analogous to the changes with the automated printing press and how that lowered the cost of entry to distribute ideas. But anyone being able to publish isn't always a good thing. Professional writers and editors perform a useful function, giving an expectation for a certain level of quality.&amp;nbsp; &lt;/p&gt;

&lt;p&gt;Now, editorial control over the content is removed. But editors are valuable - they are a filter on the content. That filter finds interesting articles and also maintains quality. A blog removes that or shifts the onus onto the writer to be their own editor. EDA blogging isn't going to be immune to the wide range of quality and value that exists in the mainstream blogosphere. Some blogs will be terrible. Some will be great. The advantage is that my definition of what is great and interesting might be radically different to yours, so I'll be able to find the content that is valuable to me, rather than what an editor thinks I need to hear. &lt;/p&gt;

&lt;p&gt;Control and classification again was brought up when the issue of the 60+ EDA blogs was mentioned. The concern was that so many disparate sources of information need to be corralled and filtered, otherwise nobody could read them or keep up. Here again, I think this is a bit of a red herring. There will be a large number of EDA blogs that will appear, but I'll personally probably only care about the content of a small percentage of them. It is exactly the same as when I come to DAC. There might be 500 companies here, but I'm not interested in the products that many or even most of them have. I personally filter out all the low level layout, silicon process technology companies and concentrate on the ones relevant to me. EDA blogs will be the same - I'll find the 5 or 10 that cover my areas of interest and read those. The beauty is that you can also find the (no doubt very different) 5 or 10 that cover your area of interest and watch those. You have the control over the content you are exposed to, rather than having &lt;a href="http://www.eetimes.com"&gt;EE Times&lt;/a&gt; select across the whole EDA sphere, which then provides maybe one article per issue that actually covers part of the industry that I care about.&lt;/p&gt;

&lt;p&gt;Along the same lines, there is no real reason that someone couldn't step up and start aggregating the content in useful ways, collecting and collating interesting content from other
sources. Reputation tends to be the driver for this. If I find someone who writes interesting content I'll tend to follow their interests too. If they point to another article or blog, I'll read that. They then are providing the role of a more traditional editor to the content I read. The only real change is that there will be a lot more editors and authors, so we can all find the more personalised channel that suits our interest. &lt;/p&gt;

&lt;p&gt;My experiences aggregating content for SoFoBoMo (&lt;a href="http://gordonmcgregor.blogspot.com/2008/01/sofobomo.html"&gt;Solo Photographic Book in a Month&lt;/a&gt;) is illustrative for this. In a couple of months, we established a group of 200 people working an indivdual book project, all working on their own project, concurrently, in the same month. Many of the participants also blogged about their experiences creating their first (for those new to the process) or latest book. Everyone was working on a similar process, but on their own personal work. &lt;a href="http://gordonmcgregor.blogspot.com/2008/04/pipes.html"&gt;I set up simple tools&lt;/a&gt; that pulled from all of the participants blogs and provide one, very focused, feed specifically about this shared project. Those people may well have been blogging about what they had for lunch or where they went at the weekend, but only the relevant &lt;a href="http://pipes.yahoo.com/gordonmcgregor/sofobomo"&gt;entries about SoFoBoMo&lt;/a&gt; appeared in the feed. It would certainly be quite trivial to do something similar for hot EDA topics too. I could do that and publish it and become a hub for those conversations. There is a world of free tools out there just to do this task. A feed that combed all the EDA blogs for ESL topics or OVM or whatever buzzwords you are interested in is trivial to set up and would deliver customised content on a daily basis. Certainly not all readers will set this up, but it only takes one person to do it and share it for everyone to benefit.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.vmmcentral.org/vmartialarts/"&gt;Janick Bergeron&lt;/a&gt; raised some interesting concerns common to most bloggers, on how to maintain the flow of content. There have been &lt;a href="http://writetodone.com/"&gt;a lot of articles&lt;/a&gt; written on how to&lt;a href="http://http://writetodone.com/2008/01/10/what-makes-great-blogwriting/"&gt; feed the beast&lt;/a&gt;, with &lt;a href="http://www.problogger.net/archives/2006/02/14/blogging-for-beginners-2/"&gt;blogs devoted&lt;/a&gt; to these sorts of topics. This isn't really an EDA blogging or even a blogging specific topic, but one common to anyone who writes. Passion has to be the driver, particularly for a personal outlet that isn't corporately funded or part of a job. I think it is hard to fake a blog - you have to want to do it, enjoy writing and have something to say. There are certainly mechanisms &lt;a href="http://writetodone.com/2008/03/03/31-ways-to-find-inspiration-for-your-writing/"&gt;to help&lt;/a&gt; discover content or processes you can put in place to make it more of a habit, but you have to want to do it at a fundamental level. My &lt;a href="http://gordonmcgregor.blogspot.com"&gt;blog on photography&lt;/a&gt; exists because I'm interested in discussing the topic. I want to share the ideas and learn from others following a similar path. I write it now because I can't stop writing it and I enjoy the process of ordering my thoughts. &lt;a href="http://www.xuropa.com/ixuropa_home.php"&gt;&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.xuropa.com/ixuropa_home.php"&gt;James Colgan&lt;/a&gt; and I had an interesting conversation on what topics make sense for blogging. I think there can be an initial fear that you have to be an expert in a particular topic to be able to talk about it. That can certainly be one approach. But there can be a lot of value to others in describing a learning process. You can become a guide for those who are following the same path if you point out the pitfalls that you fell into along the way. I used &lt;a href="http://gordonmcgregor.blogspot.com/search/label/strangers"&gt;my experiences photographing strangers&lt;/a&gt; as an example - 18 months ago I started blogging about my attempts to get better at taking pictures of people I didn't know. My early efforts were painful but I kept talking about how it improved over time. Some of those articles are amongst the more popular and valuable ones that I've written - because others who are earlier on that learning curve can see what I did over time. Similarly, in the EDA industry I could see that an expert on OVM blogging about use of the methodology would be fascinating. I could also see that a blog written about the frustrations of trying to learn to use the OVM for the first time would be of value. The expert has already probably forgotten the details that the new user might get hung up on and maybe wouldn't even know about the common mistakes that would be made. There is value to both and sharing that sort of experience.&lt;/p&gt;

&lt;p&gt;Overall this was a really interesting and fun session. Kudos to JL for pushing to make it happen and to everyone who attended and made it such a lively discussion.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>metrics</title><link href="http://fivecomputers.com/metrics.html" rel="alternate"></link><updated>2008-12-06T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-12-06:metrics.html</id><summary type="html">&lt;p&gt;&lt;a href="http://flickr.com/photos/mcgregorphoto/2572384411/"&gt;&lt;img border="0" alt="Metal" title="Metal" src="http://fivecomputers.typepad.com/photos/uncategorized/2008/06/12/metal.jpg" style="margin: 0px 5px 5px 0px; float: left;" /&gt;&lt;/a&gt;
Listened to &lt;a href="http://www.chipdesignmag.com/bailey/"&gt;Brian Bailey&lt;/a&gt; talking on the missing metrics for verification coverage at the &lt;a href="http://www.certess.com/"&gt;Certess&lt;/a&gt; booth on Wednesday. This was a really interesting talk discussing the standard code coverage and functional coverage metrics and pointing out that we don't really currently have a good metric to track when we are doing useful verification or not. Functional coverage is used for this, but care needs to be taken to ensure we are covering the right things.&lt;/p&gt;

&lt;p&gt;There's a danger that functional coverage, which was originally designed to track the quality of random stimulus, is used to only track that stimulus. In this way, we might not consider if the behaviour is actually checked or not. The same ideas are represented in David Robinson's verification planning presentation at DAC. Requirements and functional coverage without checkers is a waste of time and effort. It is possible to get 100% coverage, with lots of cover points and no enabled or implemented checkers in a design. Careful testbench design, or tools like &lt;a href="http://www.certess.com/"&gt;Certess&lt;/a&gt;, can be used to address these issues but only once you realise that functional coverage isn't a magic bullet. &lt;/p&gt;

&lt;p&gt;I also saw a demo of the Certess product, &lt;a href="http://www.certess.com/product/"&gt;Certitude&lt;/a&gt;. It randomly inserts errors into the device under test (DUT) to give a way to evaluate the quality of the testbench surrounding the DUT. The basic idea is that if the design is mutated in a particular way, the testbench is good if it can detect the error, or has a hole if this failure mode cannot be seen in the checkers. This artificial bug insertion is something I do on an ad-hoc way when developing a testbench and Certitude automates and expands on this commonly used approach.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="http://electronicsystemlevel.com/EDA-Cover-up.pdf"&gt;read a paper &lt;/a&gt;from Brian on this topic.
&lt;/p&gt;</summary><category term="eda"></category><category term="software"></category><category term="verification"></category></entry><entry><title>Where are they now?</title><link href="http://fivecomputers.com/where-are-they-now.html" rel="alternate"></link><updated>2008-11-06T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-11-06:where-are-they-now.html</id><summary type="html">&lt;p&gt;&lt;a href="http://fivecomputers.typepad.com/photos/uncategorized/2008/06/11/_s3t8496.jpg"&gt;&lt;img height="426" border="0" width="640" alt="_s3t8496" title="_s3t8496" src="http://www.fivecomputers.com/images/2008/06/11/_s3t8496.jpg" style="margin: 0px 5px 5px 0px; display: block;" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DAC started early with a Mentor sponsored breakfast at 7:30. Got to see a bit about some of their testbench automation tools that help steer coverage to more interesting parts of the design. There are a few other companies here that have similar products. The aim is to move beyond user driven constrained random testing and let the tools help in solving the problem.&lt;/p&gt;

&lt;p&gt;After that, I listened to Gary Smith on the state of the EDA industry. Highlights:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;It's all about the software&lt;/li&gt;

&lt;li&gt;Threads are dead&lt;/li&gt;

&lt;li&gt;C is finished to be replaced by some useful concurrent language - brush up on Occam I say&lt;/li&gt;

&lt;li&gt;Verification is a solved problem and will be automated - don't bother being a verification engineer&lt;/li&gt;

&lt;li&gt;Almost 38% of companies roll their own EDA tools&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;His talk made for an interesting start to the day, at least.&lt;/p&gt;

&lt;p&gt;I spent the rest of the day attending various sessions and tool demos, which I'll write more about later. I've been surprised how low attendance is. There are a lot of people from the tool companies in their booths, but not many customers for them to talk to - and that was on Monday, the free attendance day when there aren't that many technical sessions or other distractions. &lt;/p&gt;

&lt;p&gt;The Open Verification Methodology(OVM) is a hot item this year, with many sessions discussing issues around use and interoperability. Many vendors are showing products or claiming compatibility with this new standard. SystemVerilog is the other dominant theme though SystemC still has some traction. The last time I was at DAC SystemC was the new kid on the block that everyone was expecting to take over the world, not so much any more and it has settled into a system level modeling niche. &lt;/p&gt;

&lt;p&gt;The disturbing thing I am seeing is how little progress has been made in the last decade in the ESL tool industry. Many years ago I was working on ARM926 designs that were not on the bleeding edge, even then. Today, many ESL companies are still just showing support for ARM9 or being excited about performance of their ARM7 models. That's at least 2 or 3 cycles behind the latest processor technologies and a huge leap in tool complexity to keep up. Synthesis capacities are rising much slower than the process technologies, tools companies are stalling out, reimplementing the same technologies to support systemC, systemVerilog or what ever the new hot language or methodology is, without apparently making any significant progress.&lt;/p&gt;

&lt;p&gt;The other problem that the ESL companies face is the lack of models for their particular product line. Many seem to be falling into the same trap - expecting customer demand to dictate which models to develop. But that isn't going to work - the systems designers need the models right around when they decide they need the models. There is no lead time. There certainly isn't the 6 months to 1 year lead time it takes to find the right ESL company, negotiate and convince them to start creating a model, get the team together and write and verify the model, then deliver it back to the system architect. When the architect wants the model, there might be a 1 week lead time. Maybe a month, before serious work needs to start. The whole investigation better be mostly finished in 6 months. ESL companies need to seed their model libraries in anticipation of customer need. If they wait for the customer, they'll always be too late to be any use at all and keep going round that loop. In spite of that glaring hole, ESL is another hot ticket at DAC this year. Software design and implementation continues to increase in cost and complexity and HW/SW co-design companies are proliferating as a result.&lt;/p&gt;

&lt;p&gt;With the apparent dearth of progress and lack of useful model or up-to-date models, I'm not too surprised that almost 40% of companies are looking inwards for their EDA tools. Might also explain where everyone is this year, too. &lt;/p&gt;

&lt;p&gt;The one bright light in the ESL space is that although many of the tools and methodologies haven't changed much in the last 5 years, they do seem to have moved on from being all smoke and mirrors and snake oil to perhaps actually working. So maybe things haven't changed, they've just become real.&lt;/p&gt;</summary><category term="eda"></category><category term="esl"></category></entry><entry><title>a command line for the gui</title><link href="http://fivecomputers.com/a-command-line-for-the-gui.html" rel="alternate"></link><updated>2008-10-11T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-10-11:a-command-line-for-the-gui.html</id><summary type="html">&lt;p style="text-align: center;"&gt;&lt;a href="http://www.flickr.com/photos/52043707@N00/1471486765/"&gt;&lt;img src="http://farm2.static.flickr.com/1085/1471486765_ffb394dbfe.jpg" height="334" width="500" alt="open" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I've been experimenting with Mac OS X now for a few months. Trying to work out if it is a reasonable platform for &lt;a href="http://www.verilab.com" title="Verilab, Inc."&gt;Verilab&lt;/a&gt; to use internally for our various computing needs. One thing that I've come to love and now struggle to live without is a small add-on called &lt;a href="http://en.wikipedia.org/wiki/Qu%C4%B1c%C4%B8s%C4%B1%C9%A9%E2%85%B4%CE%B5%CA%80"&gt;Quicksilver&lt;/a&gt;. Superficially it isn't very interesting. A &lt;a href="http://docs.blacktree.com/quicksilver/what_is_quicksilver"&gt;fast application launcher&lt;/a&gt; - where's the fun in that? But after you delve a bit deeper, it becomes something else. It is really a command line interface for OS X, on top of the GUI.&lt;/p&gt;

&lt;p&gt;I hit a key and up it pops. Type a few characters and I can launch an application. I don't have to search through drop down menus or find icons on a desktop - much faster. I want to get a music player to jump to the next track - hot key and type '&lt;em&gt;next&lt;/em&gt;'. Stop the music, type '&lt;em&gt;stop&lt;/em&gt;'. The magic is that I don't have to switch away from what I'm currently doing, go to a different window or application and do anything. Want to email someone? Hot key, type a bit of their name and select their email address - again, without switching away from what you are working in. I can even open and edit text files without starting up a text editor - extend a todo list, add a calendar entry to my google calendar, all from the command line within the GUI. All without switching away from the current context. I can run unix terminal commands, search in documents, select groups of files and email them to someone, do quick calculations. It is amazingly more efficient than using a mouse and hunting for applications and buttons.&lt;/p&gt;

&lt;p&gt;I've always been a bit of a command-line junkie, wanting to know the keyboard shortcuts for things in a GUI environment, liking having a command prompt, but Quicksilver is different. It's a visual blend of command-line and GUI. Taking the best bits of both and putting them right under my fingertips. Highly recommended. Shame there isn't anything nearly as good for Windows XP or linux that I've found. Look &lt;a href="http://www.43folders.com/topics/quicksilver"&gt;here&lt;/a&gt; for more ideas about what Quicksilver can do.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</summary><category term="software"></category></entry><entry><title>Zerstreutheit and the hardware design flow</title><link href="http://fivecomputers.com/zerstreutheit-and-the-hardware-design-flow.html" rel="alternate"></link><updated>2008-08-28T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-08-28:zerstreutheit-and-the-hardware-design-flow.html</id><summary type="html">&lt;div style="text-align: center;"&gt;
  &lt;a href="http://xkcd.com/303/"&gt;&lt;img src="http://imgs.xkcd.com/comics/compiling.png" width="413" height="360" /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;Recently I've been &lt;a href="http://www-128.ibm.com/developerworks/java/library/j-ap09056/index.html"&gt;reading&lt;/a&gt; about the various open-source Continuous Integration servers that are available. &lt;a href="http://confluence.public.thoughtworks.org/display/CC/CI+Feature+Matrix"&gt;This chart&lt;/a&gt; gives a good feature comparision of many of the systems that are out there. &lt;a href="http://www.verilab.com" title="Verilab, Inc."&gt;We've&lt;/a&gt; been evaluating &lt;a href="http://cruisecontrol.sourceforge.net/"&gt;Cruise Control&lt;/a&gt; on some internal projects and generally trying to understand what the issues are with deploying a CI server on a hardware design project. One of the things I've been struggling with is the real, meaningful difference between continuous integration and the more typical &lt;a href="http://www.joelonsoftware.com/articles/fog0000000023.html"&gt;daily build&lt;/a&gt; and check-in smoke tests. Scheduled builds are often described as an &lt;a href="http://www.ibm.com/developerworks/java/library/j-ap03048/index.html?S_TACT=105AGX02&amp;amp;S_CMP=EDU"&gt;anti-pattern&lt;/a&gt; when considering CI, but as far as I can tell the only practical difference is in the frequency of the builds. Certainly, you have the potential to find out about a broken build more quickly with CI, hence it has less chance to impact other users. Also, you are always doing &lt;em&gt;useful&lt;/em&gt; work, rather than maybe re-running a version because no check-in has happened since the previous build. However, these distinctions of implementing CI are maybe more significant in the software world than for the typically longer build times found in hardware design projects. This then is the key point - build time is the significant factor in CI. The real benefit of using CI successfully is that you need to refine your processes to keep the build as quick as possible, striving for close to a &lt;a href="http://www.martinfowler.com/articles/continuousIntegration.html"&gt;10 minute turnaround time&lt;/a&gt;, to stop things getting backed up. The consequence of this is that the entire Checkout-Build-Test loop keeps being optimised and refined. This doesn't just help with automated processes but can significantly improve productivity for the developers who do these steps manually every day. That's great for the software world, but is it really practical for hardware design with the current compilers and the speed of typical RTL simulation? If not, is it worth even bothering with?&lt;/p&gt;

&lt;p&gt;The source control tools you choose can have a big impact on the first phase of the Checkout-Build-Test loop. When an update can take quarter an hour or longer, the source control system can become a significant productivity drain and stymie any chance of a quick turnaround. If merging changes, updating source and checking in a new revision takes hours, then there are real problems with the process and you certainly won't be doing multiple checkins per day (another fundamental CI process axiom is at minimum daily checkins for all developers, even more frequent is preferable). In &lt;a href="http://www.fivecomputers.com/2008/06/git---version-c.html"&gt;Linus' talk about Git&lt;/a&gt;, he describes being able to do a diff and merge on an entire kernel source tree (22k source files) in &lt;a href="http://git.or.cz/gitwiki/LinusTalk200705Transcript"&gt;less than a second&lt;/a&gt;. I've used other SCM environments with similar amounts of code, where an update might take 30 minutes. These sorts of differences can significantly change how you work. It isn't just a matter of the time that the particular automated task takes, but what the developer does while they are waiting, reading email, writing documentation, switching context to other distractions.&lt;/p&gt;

&lt;p&gt;Similarly, if the build takes half an hour or longer before it fails with a trivial syntax error, you'll have switched to something else and then have to try to mentally context switch back again to work on the problem. Each of these switches have an associated, measurable attention and productivity hit. Improving the build step can have a big impact on how you &lt;a href="http://www.43folders.com/2008/06/13/zerstreutheit-and-attention-management-cure"&gt;manage your attention&lt;/a&gt; and keep engaged with the development process. A faster turnaround can stave off the onset of &lt;em&gt;&lt;a href="http://www.43folders.com/comment/337830/literal-translation-Zerstreutheit"&gt;Zerstreutheit&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The final Test step is significantly slower for hardware design. Often this is used as a justification not to bother optimising the Checkout and Build phases, because they are comparatively much shorter. A multi-day or week long regression might fool you into thinking that an hour long build is relatively good. However, simulation &amp;amp; testing is the one step where the developer can be more out of the loop, with less impact. Typically, the user is not so tightly coupled into the testing loop, once the initial bugs are ironed out. Automation can certainly help here too, re-running failing tests with waveform dumping enabled or increased logging, to present a useful working environment for debug when the developer does come back to look at the fails.&lt;/p&gt;

&lt;p&gt;The point really is that there is still a significant advantage to be had in spending effort to optimize the SCM and compile stages in a development flow, to maximise designer productivity and attention, even if the simulation time is large. Also a &lt;a href="http://www.ibm.com/developerworks/java/library/j-ap11297/index.html?S_TACT=105AGX02&amp;amp;S_CMP=EDU"&gt;build pipeline&lt;/a&gt; can be used in the CI server to stage the build and testing feedback, to further mitigate the length of time that running tests takes. Deploying CI brings attention to how long these processes take and might help improve the entire development environment. Having fast enough tools can help the developers keep focused on what they are doing, without breaks for swordfights or reading email. Optimizing the build is still important, even in a hardware design environment, even when the runtime for regressions might be in terms of days or weeks. You might think the build process is only a comparatively small part of the overall runtime for a regression, but the designers spend most of their time looping through that comparatively small part.&lt;/p&gt;

&lt;p&gt;So what is the take away? Does CI have a place in a hardware design flow? I think that CI servers can certainly be used to manage running regressions and nightly builds. Smoke tests and scheduled build approaches can be controlled with most of the CI servers. However, the real continual building process required to move from scheduled builds to CI seems to be hard to map to hardware design, simply because of the length of time of the checkout/build/test loops. Tool improvements and generally faster hardware seems to be key to increasing the frequency of integration tests, at least for now. However, optimizing the interaction between the users and automated tools is a key and often overlooked part of developing an effective design flow, if you plan on using CI or not.&lt;/p&gt;</summary><category term="eda"></category><category term="software"></category></entry><entry><title>show my pc</title><link href="http://fivecomputers.com/show-my-pc.html" rel="alternate"></link><updated>2008-08-20T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-08-20:show-my-pc.html</id><summary type="html">&lt;p style="text-align: center;"&gt;&lt;a href="http://www.flickr.com/photos/52043707@N00/2773340946/"&gt;&lt;img src="http://farm4.static.flickr.com/3081/2773340946_6e4b085c39.jpg" height="334" width="500" alt="frisco shore" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I'm on an extended work trip at the moment. My wife and I have been keeping touch with &lt;a href="http://www.skype.com"&gt;Skype&lt;/a&gt;, using the video conferencing and VoIP on a daily basis. It's great to be able to see each other and talk without speaking in to a phone. I've come to realise the value of a good microphone and proper speaker setup, as well as a decent camera. In general it has been really effective, at least within the US. Typically fast, quite clear audio and good picture quality.&lt;/p&gt;

&lt;p&gt;We also needed to look at some documents on the computer. Skype doesn't have a remote desktop sharing option and we had some problems getting the Windows Live Messenger working to share screens and there would be the added difficulty of sharing from Windows XP to my Mac (I'd have been using a VM Fusion Windows session). Instead, we tried &lt;a href="http://www.showmypc.com"&gt;http://www.showmypc.com&lt;/a&gt;. I was impressed how easy it was to set up, just download an application and run it (a bit of trust required there). Then there is a password that you share with the user at the other end of the link and you are connected. Under the hood it sets up a VNC session via an SSH server, but from an end user perspective, all you need is the password to connect. It was fast, easy to use and worked well Windows XP &amp;lt;-&amp;gt; OS X. They have options where you set up your own SSH server in the middle, rather than trusting their servers, but I think you have to pay for that option. In general, it was surprisingly easy and effective. We were able to still have the Skype video call running in parallel too.&lt;/p&gt;

&lt;p&gt;The picture of the beach? That's the Outer Banks in North Carolina - about 4 hours from where I'm working at the moment. I &lt;a href="http://flickr.com/photos/mcgregorphoto/sets/72157606793809724/show/"&gt;took the opportunity&lt;/a&gt; to go there for the weekend and camp out in the sand. Traveling for work isn't ideal but I try to make the most of the places I do get to go, in particular seeing the area or taking advantage of museums and art galleries I wouldn't normally have the chance to visit. In that respect, I tend to disagree with Grant Martin's sentiment over &lt;a href="http://www.chipdesignmag.com/martins/2008/07/07/not-taking-a-country-for-granted/"&gt;on his blog&lt;/a&gt;. I've still been able to disconnect on business trips and see a bit of the local culture. Two weeks ago I saw a &lt;a href="http://www.ncartmuseum.org/collections/highlights/european/french/1770-1900/011_lrg.shtml"&gt;Monet&lt;/a&gt; at the North Carolina museum of art. This weekend I was in the Outer Banks. I think you have to push yourself a bit to really take advantage of the opportunities that might be there, but it can certainly be done. For every business trip I've been on in the last few years, I've really worked to get to at least one museum or art gallery, just to make it worthwhile.&lt;/p&gt;</summary><category term="software"></category></entry><entry><title>a few good men</title><link href="http://fivecomputers.com/a-few-good-men.html" rel="alternate"></link><updated>2008-08-13T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-08-13:a-few-good-men.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.flickr.com/photos/52043707@N00/1511132571/"&gt;&lt;img src="http://farm3.static.flickr.com/2161/1511132571_ebe7649da0.jpg" height="334" width="500" alt="jackson pollock" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.43folders.com/2008/08/13/estimating-time"&gt;Interesting pos&lt;/a&gt;t over on 43Folders on planning and task estimation. I've certainly experienced theses problems in the past but hadn't heard them described as the &lt;a href="http://en.wikipedia.org/wiki/Planning_fallacy"&gt;planning fallacy&lt;/a&gt; or &lt;a href="http://en.wikipedia.org/wiki/Optimism_bias"&gt;optimism bias&lt;/a&gt;. The suggested ~44% buffer to add is quite depressing but probably close to true based on my experience. That means in a typical 5 day work week, you'll be lucky to do useful work for even 3 of them.&lt;/p&gt;

&lt;p&gt;The flip side of planning is probably something we've all experienced too. You do your best to come up with a realistic schedule, then you are told that that is unacceptable and to reduce it to a wildly unreasonable, unrealistic estimate. Everyone knows it will be unachievable, but that's what you work towards. No wonder so many projects slip - they finish right around when they would have finished with realistic planning. Now that isn't to excuse projects on a terminal death march or those that have gone wildly out of control. But so often, I've been on projects where the end date was set before the planning was done.&lt;/p&gt;

&lt;p&gt;In fact, I think in those cases, a realistic schedule might mean the project would never start, so everyone puts on their rose-coloured glasses and agrees to an insane schedule, that meets the deadline. Then the project starts to slip, often before anyone can even do any work it will be late. Over my career I've collected metrics on the various projects I've worked on, formally and informally. I've found quite a bit of resistance to using this real world project data for subsequent planning sessions. Mostly that's been the case when a certain schedule was required, with set number of people and the nasty reality of past experience was meaning the numbers wouldn't add up &lt;em&gt;correctly.&lt;/em&gt; Those projects finished when we originally thought they would too.&lt;/p&gt;

&lt;p&gt;So how do we move beyond this? Is it really that we are so bad at estimating how long things will take? Or that we can't accept the numbers that we come up with because of the time to market pressures and realities of the market place? Do the planners want to know the truth right at the start, or deal with the successive revelation of the nasty reality over time? Execution &lt;a href="http://en.wikipedia.org/wiki/Slow_slicing"&gt;by one thousand slips&lt;/a&gt; or just planning business as usual?&lt;/p&gt;</summary><category term="verification"></category></entry><entry><title>SOAP gets in your eyes</title><link href="http://fivecomputers.com/soap-gets-in-your-eyes.html" rel="alternate"></link><updated>2008-07-15T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-07-15:soap-gets-in-your-eyes.html</id><summary type="html">&lt;div style="text-align: center;"&gt;
  &lt;a href="http://www.flickr.com/photos/52043707@N00/1511995758/"&gt;&lt;img width="500" height="334" src="http://farm3.static.flickr.com/2141/1511995758_bca60a43b4.jpg" alt="lava" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I have a few days between a recently finished contract and before I start the next one. I've decided to use that time to learn a bit of &lt;a href="http://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt; and the &lt;a href="http://www.rubyonrails.org/"&gt;Rails&lt;/a&gt; framework for a small project. I'm putting something together to do time tracking and communicate with the &lt;a href="http://www.projectorpsa.com/"&gt;Professional Services Automation software&lt;/a&gt; that we use in &lt;a href="http://www.verilab.com" title="Verilab, Inc."&gt;Verilab&lt;/a&gt;. As ever this sort of learning only really happens on an '&lt;em&gt;as-needed&lt;/em&gt;' basis so I think that a small driver project will move things along.&lt;/p&gt;

&lt;p&gt;One of the first things I've been working on is the underlying communications with the web services interface that Projector provides into their database. They use a &lt;a href="http://en.wikipedia.org/wiki/SOAP"&gt;SOAP&lt;/a&gt; interface, with a &lt;a href="http://www.w3.org/TR/wsdl"&gt;Web Services Description Language (WSDL)&lt;/a&gt; representation of the API. This WSDL file is a machine-readable, XML description of all of the API calls and expected types for those calls. You can interact with the SOAP interface directly, constructing the XML to place the request and then parsing the responses manually. However, that becomes painful very quickly, as the calls are very verbose and unwieldy. The solution is to use one of the various SOAP frameworks available, that interrogate the WSDL and then generate objects and methods to encapsulate the interface.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This all seemed mostly reasonable and I got a copy of &lt;a href="http://dev.ctor.org/soap4r"&gt;&lt;em&gt;soap4r&lt;/em&gt;&lt;/a&gt; which is the default Ruby SOAP interface. The latest version supports two interfaces, dynamically parsing the WSDL and generating object factories, or a script that statically parses the WSDL and generates a variety of helper classes that can be used to build the SOAP calls.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At this point, the almost total lack of documentation for &lt;em&gt;soap4r&lt;/em&gt; started to bite me. There is plenty of sample code, assuming you only ever want to pass a string (like a stock ticker) and only ever really expect a single integer or float to come back (such as a stock price). Very few examples go much further than that, but the Projector SOAP API uses a variety of heavily nested complexTypes and it wasn't very clear at all how to access or manipulate them. I made the initial mistake of trying to use the dynamic WSDL parsing, but after a while switched to using the statically generated classes which helped somewhat. At least then I could read the source and see what the member variables were in the classes and also what the class names were. Part of the problem seems to be that the Ruby world prefers the &lt;a href="http://en.wikipedia.org/wiki/Representational_State_Transfer"&gt;RESTful&lt;/a&gt; approach to web services, so SOAP is something of an ugly step-child. But SOAP is what I have to work with to get the information I need.&lt;br /&gt;
&lt;br /&gt;
At one point, I abandoned the Ruby version and tried to build an equivalent set of queries in Python. I'm more familiar with that language and thought it might remove one of the levels of complexity from the problem. In the Python world, I tried using the &lt;a href="https://fedorahosted.org/suds"&gt;SUDS&lt;/a&gt; framework to manage the WSDL. In this case, SUDS only supports dynamic parsing of the WSDL file and this parsing is quite a computationally expensive task. It doesn't make for fast, iterative exploration when it takes about 30 seconds to start up the script each time. I wasn't able to pickle the results to cache the driver either. Again, the SUDS framework has a real dearth of documentation - in fact it is even more sparse than &lt;em&gt;soap4r&lt;/em&gt;. However, poking around at the classes using the introspection features of Python helped me get a bit further along and also cast the Ruby experience in a different light. I was able to take what I'd learned in Python and apply it to the Ruby scripts and made quite a bit more progress.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I've been learning bits and pieces of Ruby along the way, too. Ruby is also a dynamic language with introspection, so I was able to start poking around in the objects, printing out methods and instance_variables to see what was going on. The interactive command line in Python is fantastic for doing this sort of exploration. I haven't yet found an equivalently powerful command line/ interactive way of doing this sort of playing around in Ruby (feel free to let me know how!). By some trial and error and dumping objects along the way I was able to get the data I wanted.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So a day and a half later, I now have a simple Ruby script that can talk to the ProjectorPSA SOAP API and query the list of active projects, then print out and count that list. Painful to get up the learning curve, but now at least I know how to work with the SOAP framework and make the method calls that I need. The equivalent Python script is almost there, but with a missing namespace in the generated XML that I haven't quite worked out how to control from the other side of the SUDS framework.&lt;br /&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;Overall, SOAP still seems very verbose and complex, for what it does - layers of objects, lots of XML, just to do very simple queries. A simple method invocation such as:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;
&amp;lt;env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:env="http://schemas.xmlsoap.org/soap/envelope/"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&amp;gt;
  &amp;lt;env:Header&amp;gt;
        &amp;lt;n1:OpsAuthenticationHeader 
            xmlns:n1="http://www.opsplanning.com/webservices/public/data"
            env:mustUnderstand="0"&amp;gt;
          &amp;lt;n1:EmailAddress&amp;gt;REMOVED&amp;lt;/n1:EmailAddress&amp;gt;
          &amp;lt;n1:Password&amp;gt;REMOVED&amp;lt;/n1:Password&amp;gt;
          &amp;lt;n1:AccountName&amp;gt;verilab&amp;lt;/n1:AccountName&amp;gt;
        &amp;lt;/n1:OpsAuthenticationHeader&amp;gt;
  &amp;lt;/env:Header&amp;gt;
  &amp;lt;env:Body&amp;gt;
    &amp;lt;n2:ExportProjectList 
       xmlns:n2="http://www.opsplanning.com/webservices/public/data"&amp;gt;
      &amp;lt;n2:request xsi:type="n2:ExportProjectListRq"&amp;gt;
        &amp;lt;n2:Parameters&amp;gt;
          &amp;lt;n2:LimitToOpenForTimeOnly&amp;gt;true&amp;lt;/n2:LimitToOpenForTimeOnly&amp;gt;
          &amp;lt;n2:LimitToOpenForCostOnly&amp;gt;true&amp;lt;/n2:LimitToOpenForCostOnly&amp;gt;
          &amp;lt;n2:MaxRowsToReturn&amp;gt;200&amp;lt;/n2:MaxRowsToReturn&amp;gt;
          &amp;lt;n2:OnlyCountRows&amp;gt;false&amp;lt;/n2:OnlyCountRows&amp;gt;
        &amp;lt;/n2:Parameters&amp;gt;
      &amp;lt;/n2:request&amp;gt;
    &amp;lt;/n2:ExportProjectList&amp;gt;
  &amp;lt;/env:Body&amp;gt;
&amp;lt;/env:Envelope&amp;gt;

&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The Ruby code to generate this one remote procedure call is equally verbose, even with all the auto generated code within the &lt;em&gt;soap4r&lt;/em&gt; framework:
&lt;pre&gt;
require 'rubygems'
gem 'soap4r'
require 'soap/wsdlDriver'
require 'soap/header/simplehandler'
require 'defaultDriver'&lt;/p&gt;
&lt;h1&gt;new authentication class to construct proper SOAP Authentication header for&lt;/h1&gt;
&lt;h1&gt;each access to the server&lt;/h1&gt;
&lt;h1&gt;this is idiomatic for the soap4r framework - it is what it is&lt;/h1&gt;
&lt;p&gt;class ClientAuthHeaderHandler &amp;lt; SOAP::Header::SimpleHandler
  def initialize(userid, passwd)
    super(XSD::QName.new("http://www.opsplanning.com/webservices/public/data", 
                         "OpsAuthenticationHeader"))
    @sessionid = nil
    @userid = userid
    @passwd = passwd
  end&lt;/p&gt;
&lt;p&gt;def on_simple_outbound
    if @sessionid
      { "sessionid" =&amp;gt; @sessionid }
    else
      { "AccountName" =&amp;gt; "verilab", "EmailAddress" =&amp;gt; @userid, 
        "Password" =&amp;gt; @passwd }
    end
  end&lt;/p&gt;
&lt;p&gt;def on_simple_inbound(my_header, mustunderstand)
    @sessionid = my_header["sessionid"]
  end
end&lt;/p&gt;
&lt;h1&gt;make sure everything is unicode-friendly, just in case&lt;/h1&gt;
&lt;p&gt;XSD::Charset.encoding = 'UTF8'&lt;/p&gt;
&lt;h1&gt;create the SOAP driver object to handle the requests&lt;/h1&gt;
&lt;p&gt;endpoint_url = ARGV.shift
driver = OpsProjectorSvcSoap.new(endpoint_url)&lt;/p&gt;
&lt;h1&gt;enable debug output (showing SOAP XML) if you run this script with ruby -d&lt;/h1&gt;
&lt;p&gt;driver.wiredump_dev = STDOUT if $DEBUG&lt;/p&gt;
&lt;h1&gt;set up authentication object&lt;/h1&gt;
&lt;p&gt;user = "account name here"&lt;/p&gt;
&lt;h1&gt;uncomment to prompt for the password each time the script runs&lt;/h1&gt;
&lt;p&gt;passwd = ask("Password:") { |q| q.echo = false } &lt;/p&gt;
&lt;h1&gt;create the authentication token and stuff it into the driver's&lt;/h1&gt;
&lt;h1&gt;header for every SOAP request that gets generated&lt;/h1&gt;
&lt;p&gt;auth = ClientAuthHeaderHandler.new user, passwd
driver.headerhandler &amp;lt;&amp;lt; auth&lt;/p&gt;
&lt;h1&gt;Wrap the request in a Rq object, inside an ExportProjectList object&lt;/h1&gt;
&lt;h1&gt;means it all unrolls to be the correct SOAP/XML. There may be a more direct&lt;/h1&gt;
&lt;h1&gt;way to do this from just the ExportProjectList and property setting?&lt;/h1&gt;
&lt;h1&gt;:LimitToOpenForTimeOnly =&amp;gt; true ???&lt;/h1&gt;
&lt;p&gt;req = ExportProjectList.new(
        ExportProjectListRq.new(
            ExportProjectListRequest.new(true, true, nil, 2000000, nil, false) ) )&lt;/p&gt;
&lt;h1&gt;make the SOAP call, and extract the exportProjectListResult object&lt;/h1&gt;
&lt;p&gt;result = driver.exportProjectList(req).exportProjectListResult&lt;/p&gt;
&lt;h1&gt;display project list. The hierarchy can be intuited from the various bits of ruby&lt;/h1&gt;
&lt;h1&gt;generated by the wsdl2ruby.rb script (defaultMappingRegistry.rb, default.rb et al)&lt;/h1&gt;
&lt;p&gt;result.data.projectList.project.each { |project| print_project(project) }&lt;/p&gt;
&lt;p&gt;&lt;/pre&gt;The analogous Python code is similarly wordy. As our very bright admin, Will, says about SOAP '&lt;em&gt;run away, run away&lt;/em&gt;'&lt;/p&gt;</summary><category term="software"></category></entry><entry><title>unthinkable futures from the past</title><link href="http://fivecomputers.com/unthinkable-futures-from-the-past.html" rel="alternate"></link><updated>2008-07-14T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-07-14:unthinkable-futures-from-the-past.html</id><summary type="html">&lt;p&gt;I found this &lt;a href="http://kk.org/ct2/2008/06/unthinkable-futures.php"&gt;list from 1993&lt;/a&gt;, where Brian Eno and Kevin Kelly throw out wild and wacky things that might happen. Some of them seem a whole lot more likely from 15 years in the future. To me the ideas on the appeal of US citizenship seems to already be starting to happen, with an economy where multiple citizenship and an ability to easily move and work is a competitive advantage. The US tax laws in particular don't endear me to becoming a US or dual citizen.&lt;/p&gt;

&lt;p&gt;
The idea of squatter's suburbs, where the more affluent return in droves to city centers, driven in part by rising gas prices, and displace the poor appears to be a quite likely outcome now. Probably not such a trend a decade and a half ago.
&lt;/p&gt;</summary><category term="thingumyjigs"></category></entry><entry><title>viigo</title><link href="http://fivecomputers.com/viigo.html" rel="alternate"></link><updated>2008-07-11T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-07-11:viigo.html</id><summary type="html">&lt;p&gt;I've had a &lt;a href="http://www.blackberry.com/blackberrycurve.shtml"&gt;Blackberry Curve&lt;/a&gt; for a while. Really like having a real keyboard and the screen is big enough to actually browse web pages on and read quite a bit of text. However, the built-in web browser is about the worst I've ever used. Slow, clunky, painful. I have been using Google Reader's mobile view to catch up on RSS feeds and blogs while out and about. A few days ago I downloaded the free &lt;a href="http://viigo.com/home"&gt;Viigo&lt;/a&gt; feed reader. A huge improvement! Heartily recommend it.&lt;/p&gt;

&lt;p&gt;The setup was a painful, as their web site wasn't particularly fast or flexible to edit feeds. Once I realised you could download an &lt;a href="http://en.wikipedia.org/wiki/OPML"&gt;OMPL&lt;/a&gt; format list from Google reader and upload it to Viigo things went much more smoothly. You can also link it directly to an aggregator feed, such as Google reader. This then keeps track of feeds that you add or remove from the other viewer, but it doesn't sync up what was read between each view, which would be a really nice feature.&lt;/p&gt;

&lt;p&gt;Other than the setup issues, I've found it great to use. Clean interface, fast and without the pain of being in the browser environment. The price is good too!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</summary><category term="software"></category><category term="thingumyjigs"></category></entry><entry><title>Git - version control done right</title><link href="http://fivecomputers.com/git-version-control-done-right.html" rel="alternate"></link><updated>2008-06-26T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-06-26:git-version-control-done-right.html</id><summary type="html">&lt;p&gt;&lt;img width="500" height="334" src="http://farm3.static.flickr.com/2012/2573207802_7f55cbaab2.jpg" alt="concert hall" /&gt;&lt;/p&gt;

&lt;p&gt;As I've started working on this small CPU project, one of the first decisions I've been considering has been which version control system to use. I've been a user of subversion for most of my personal projects for several years now and am currently using it at a client. As a result I'm quite familiar with the ins and outs of using it on a variety of sizes of projects. I've become more aware of distributed systems, such as &lt;a href="http://git.or.cz/"&gt;Git&lt;/a&gt; and &lt;a href="http://www.selenic.com/mercurial/wiki/"&gt;Mercurial&lt;/a&gt; over the last year, but haven't really been able to get my head around the advantages of them. In particular, the quote below from Linus Torvalds has been in the back of my mind.&lt;/p&gt;

&lt;p style="text-align: center;"&gt;&lt;span style="font-size: 1.4em;"&gt;&lt;em&gt;"The slogan of Subversion for a while was 'CVS done right&lt;/em&gt;&lt;em&gt;', or something like that, and if you start with that kind of slogan, there's nowhere you can go. There is no way to do CVS right."&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p style="text-align: right; font-size: 10px;"&gt;- Linus Torvalds&lt;/p&gt;

&lt;p&gt;One of the main source control issues I've seen on several of the projects I've worked on has been the aversion to branches that most users have. Typically there is a big central source repository that everyone will check out from. You then develop in your own little world. When the particular piece of work is complete, you check it back in. Usually, there is a fairly high barrier or cost to those commits, with sets of test suites that you must pass before you can commit your code back to the central repository. The checks take hours to run and you can not check back in until your code passes all the tests. Otherwise everyone else is at risk. But I always found that if I was working on something non-trivial, I'd really like to make some progress and check point that half way, committing it in to just a local branch, then working on further. That would give me the confidence to make larger changes, safe in the knowledge I can revert back to a midway working point. That's what a branch would be for, after all, but not if they are hard to make and not if the commit cost is so high. So we never did that, working for days or weeks before committing any changes.&lt;/p&gt;

&lt;p&gt;The second common frustration I've seen with a centralized repository occurs when two people are working closely together on a piece of the system. This happens to characterise almost every verification endeavor, for example. By common definition, the verification and design work should be done by two different people, just to get extra eyes on the spec. This avoids duplicating erroneous assumptions about the design and is fundamental to the whole process. As a consequence, we are almost always faced with the situation where changes need to be made by two or more people, in distinct parts of the code (e.g., testbench and rtl) but cannot be checked in because of mutual dependencies. The changes depend on each other and all the commit checks will fail for either change on its own. Various ways around this exist, disabling affected checks in the commit scripts, copying files into each others workspaces and other hacks. All because fundamentally the centralised server approach, with costly branches and high commit costs, doesn't really let this sort of work proceed in an effective way.&lt;/p&gt;

&lt;p&gt;The third frustration is the general speed of the repository. Time to check things out, time to do merges, how long it takes to do a diff or an update. These operations can usually mean a break for coffee or a walk around while the tool fetches the changes, compares them and attempts to merge it all together. Compound that by working in remote sites or across multiple geographic locations.&lt;/p&gt;

&lt;p&gt;Git claims to solve these problems and be a whole lot faster at the same time.&lt;/p&gt;

&lt;p&gt;The key is in breaking away from a centralised server. The database is distributed to every developer. As a result, everyone works on their own branch by default. Making further branches is trivial, because they don't get sent to every other developer. Fewer issues with namespace collisions when naming a branch, no real concern about checking code in and someone else getting your partially finished work. Earlier today I'd listened to &lt;a href="http://www.joelonsoftware.com/"&gt;Joel Spolsky&lt;/a&gt; and &lt;a href="http://www.codinghorror.com/"&gt;Jeff Atwood&lt;/a&gt; &lt;a href="http://itc.conversationsnetwork.org/shows/detail3710.html"&gt;talking&lt;/a&gt; about the fact that Git makes branching trivial, but I didn't really understand why until I &lt;a href="ttp://www.youtube.com/watch?v=4XpnKHJAok8"&gt;watched a really interesting presentation&lt;/a&gt; from Linus Torvalds on the subject. It is supposed to be a talk about Git, but really he focuses almost exclusively on the advantages of a distributed repository. I'd initially thought the real advantage was the '&lt;em&gt;always available&lt;/em&gt;' nature of a distributed repository, so that you could work on a plane or generally away from a network and still be able to check in, look at histories and all the things you normally need the central server access for. That's certainly part of the reason why it is interesting, but the branching and merging cost reduction that Git claims to offer is a much bigger deal.&lt;/p&gt;

&lt;p&gt;&lt;object width="425" height="344"&gt;
  &lt;param name="movie" value="http://www.youtube.com/v/4XpnKHJAok8&amp;amp;hl=en" /&gt;
  &lt;embed width="425" height="344" src="http://www.youtube.com/v/4XpnKHJAok8&amp;amp;hl=en" type="application/x-shockwave-flash" /&gt;
&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;For my second source of frustration above, Git also provides a solution. As there is no central repository, everyone can pull and push data to each other. The verification engineer and designer can exchange files more easily, through a tracked, version controlled system, rather than the usual sideband exchanges or hacks to the check-in scripts. Git also addresses that third issue, because all of the files are local and it has been designed for performance. Network overhead isn't an issue for a &lt;em&gt;diff&lt;/em&gt; or history request as you have all the data locally. Merges are similarly less painful. The claimed performance is impressive and part of the reason why I want to try Git out.&lt;/p&gt;
&lt;p&gt;Now, the most glaring problem with all this is that it sounds like anarchy. There is no central organisation, check-ins can happen any time, so where did all the quality assurance go? Linus talks about the network of trust relationships in his presentation. But, you can still have acceptance tests on when you actually pull data from a particular user or set of users. You can require them to run a battery of tests before they are allowed to share their work with the rest of the project. The usual checks and balances can be put back in place for when the whole database gets reassembled, but the individual developers or groups of designers can work more efficiently in a sub-repository. Git also supports hierarchical projects that combine various blocks of code, in fact that seems to be the preferred use model. Each sub-system on a design would be a unique Git repository. It could be even broken down further and have each IP block in their own repository. The general approach that has been used in the past, with quality checks, can still be used with some changes, as a gate to when larger mergers take place. This probably requires some trusted people in the organisation to act as gatekeepers or guardians for each level, but the basic methodology shouldn't be too difficult to layer on top.&lt;/p&gt;
&lt;p&gt;You can read a lot more about Git on the &lt;a href="http://git.or.cz/"&gt;homepage,&lt;/a&gt; including conversion documents from other common source control systems and details on the actual commands to use. Looking through the &lt;a href="http://git.or.cz/course/svn.html"&gt;SVN conversion document&lt;/a&gt;, the git command syntax appears a bit cleaner and generally more intuitive to me. I also played around with the &lt;em&gt;merge&lt;/em&gt; and &lt;em&gt;diff&lt;/em&gt; tools and they seem powerful. It was very easy to create and populate a repository, for example. I plan on using it for the next few projects I work on to get a feel for how really useful it is and where the issues are hidden.&lt;/p&gt;
&lt;p&gt;Edit to add: I found this &lt;a href="http://git.or.cz/gitwiki/GitSvnComparsion"&gt;draft version of the differences&lt;/a&gt; between Git and Subversion quite useful.&lt;/p&gt;</summary><category term="eda"></category><category term="software"></category><category term="verification"></category></entry><entry><title>a somewhat crazy notion</title><link href="http://fivecomputers.com/a-somewhat-crazy-notion.html" rel="alternate"></link><updated>2008-06-20T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-06-20:a-somewhat-crazy-notion.html</id><summary type="html">&lt;p&gt;&lt;a title="Death Valley, after the storm by Gordon McGregor, on Flickr" href="http://www.flickr.com/photos/mcgregorphoto/358741765/"&gt;&lt;img height="333" width="500" alt="Death Valley, after the storm" src="http://farm1.static.flickr.com/146/358741765_9ab4eeb321.jpg" /&gt;&lt;/a&gt;

&lt;/p&gt;

&lt;p&gt;Many ideas have been whirling around in my head since being at DAC. I've been inspired to learn some new things, starting with the &lt;a href="http://www.ovmworld.org/"&gt;Open Verification Methodology&lt;/a&gt; but also revisiting some of the Electronic System Level tools and flows that I've worked with in the past. I'm interested in exploring visualization techniques and tools and how they might be applied to verification and design. I'd also like to learn more about a few of the more interesting formal verification tools, like &lt;a href="http://www.onespin-solutions.com"&gt;OneSpin 360 MV&lt;/a&gt; and maybe explore what is possible with ESL tools like &lt;a href="http://www.bluespec.com/products/index.htm"&gt;Bluespec's SystemVerilog&lt;/a&gt; flow or the various other similar tools that are out there.&lt;/p&gt;

&lt;p&gt;I have a difficult time learning things just for the sake of it, tending to be more driven by necessity rather than idle curiosity. I've been doing some work based around a small CPU core and started getting frustrated with the way the CPU was architected. This led me to start considering designing my own CPU, just for fun. Partly as a motivation to crack open a Hennessy &amp;amp; Patterson book that I've been meaning to read for a few years, partly to see if I can do it, partly as a vehicle to hang all those other ideas upon.&lt;/p&gt;

&lt;p&gt;I've been looking around the web, browsing on &lt;a href="http://opencores.org/"&gt;OpenCores&lt;/a&gt; and finding humbling projects, such as &lt;a href="http://homebrewcpu.org/"&gt;HomebrewCPU,&lt;/a&gt; which is a Minix-compatible CPU entirely constructed from discrete gates. You can even browse the web pages that it is serving or telnet in to it! To my way of thinking, that is slightly nuts - impressive, but nuts all the same - five wire-wrapped boards to debug. My &lt;a href="http://www.informatik.uni-trier.de/~ley/db/indices/a-tree/m/McGregor:Gordon.html"&gt;background is in FPGAs&lt;/a&gt; and that seems the perfect technology for this sort of exploration - I'm also thinking along the way that I might be able to play with synthesisable verification or FPGA enhanced verification/ emulation as well as possibly using this as a platform for a reconfigurable architecture. Lots of ideas, potential and possibilities. It will also give me a chance to re-engage with FPGA technologies and learn about more about the state of those tools. The various tools are getting to a fairly mature point and a simple pipelined CPU shouldn't require too much work but still be complex enough to do interesting things with.&lt;/p&gt;

&lt;p&gt;I've been looking at &lt;a href="http://www.xilinx.com"&gt;Xilinx&lt;/a&gt; and &lt;a href="http://www.altera.com"&gt;Altera &lt;/a&gt;to get an understanding of their current tool flows and trying to work out language support and maturity - which would be the best option for systemVerilog, where the best simulation options are and that kind of thing. No real conclusions yet, but both have trial versions of what appears to be a complete tool chain, so I will probably drive a small example through both flows as a pipe cleaner.&lt;/p&gt;

&lt;p&gt;Then of course there are the more fundamental religious issues - CISC or RISC, what ISA to use. Roll my own, pick up an already defined but open architecture, or something in between? I'm looking for suggestions in this respect - I know ARM are quite litigious when it comes to cloning their ISA, so I'll be avoiding that, but &lt;a href="http://www.opensparc.net/"&gt;OpenSPARC&lt;/a&gt; might well be a good option. Any other suggestions? I'm not sure if the early MIPS ISAs are cloneable without problems? Maybe I could go really back to my roots and implement a &lt;a href="http://en.wikipedia.org/wiki/Zx81"&gt;Z80 architecture&lt;/a&gt;. The advantage of picking on an existing ISA is that the tools come mostly for free. While porting gas and gcc to my own ISA could also be an interesting experiment and learning experience, it would probably be more of a distraction than I want.&lt;/p&gt;

&lt;p&gt;I am a fan of the Python language and tend to write most of my &lt;a href="http://gordonmcgregor.blogspot.com/2008/03/flickr-set-parser-for-gpsvisualizer.html"&gt;personal projects&lt;/a&gt; in it. As a result, I'm intrigued by the potential for writing the core in Python, using some of the available extensions and libraries. Two packages seem to already exist, &lt;a href="http://myhdl.jandecaluwe.com/doku.php"&gt;MyHDL&lt;/a&gt; and &lt;a href="http://pyhvl.sourceforge.net/"&gt;PyHVL&lt;/a&gt;. MyHDL is Python extension to let you express parallel behaviour that can then be automatically translated to verilog or VHDL. PyHVL provides the other piece of the Python puzzle, enabling high-level verification in Python. So potentially I could do the design and verification in Python then drive through into an FPGA flow for implementation. &lt;a href="http://www.coolverification.com/2008/06/ovm-world-summi.html"&gt;JL&lt;/a&gt; jokingly mentioned the potential for an OVM port to Python but maybe it isn't such a crazy notion. The thing that Python is fantastic for is expressing complex ideas quickly and without a lot of fuss or housekeeping. From the verification perspective it seems to be a perfect match as I can focus more on the testing, and less on the language. I'm a bit more skeptical about using it on the design side but I think it might be worth a look.&lt;/p&gt;

&lt;p&gt;To kick things off, I found the description for a &lt;a href="http://www.csie.ntu.edu.tw/~b92029/data/EXP/mcpu-doc.pdf"&gt;minimal CPU&lt;/a&gt; on opencores. This is a really basic 8-bit processor, 4 op codes, couple of registers and a very simple, small architecture, yet it can still do some useful function. This evening I wrote a Python ISS for it, just to prove out some ideas. Took about an hour to get a working cycle-based ISS together for the architecture. Of course, immediately the next thing you need is an assembler and that was fairly easy to put together in Python too. Nothing particularly complex, but a two pass assembler that supports labels and constants and generates code that runs on the core. I'm able to assemble and run the example greatest common divisor (Dijkstra's algorithm) described in the paper and it has given me a good indication of the direction to go. So far, my couple of hour project can assemble and execute the following code:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-size: 0.8em;"&gt;start:&lt;br /&gt;&amp;nbsp; &amp;nbsp; NOR allone&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;; akku == 0&lt;br /&gt;&amp;nbsp; &amp;nbsp; NOR b&lt;br /&gt;&amp;nbsp; &amp;nbsp; ADD one&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;; akku = -b&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; ADD a&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; ; akku = a - b&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; ; Carry set when akku &amp;gt;= 0&lt;br /&gt;&amp;nbsp; &amp;nbsp; JCC neg&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; STA a&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; ADD allone&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;br /&gt;&amp;nbsp; &amp;nbsp; JCC end&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;; A=0 ? -&amp;gt; end, result in b&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; JCC start&lt;br /&gt;&lt;br /&gt;neg:&lt;br /&gt;&amp;nbsp; &amp;nbsp; NOR zero&lt;br /&gt;&amp;nbsp; &amp;nbsp; ADD one&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;; Akku = -Akku&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; STA b&lt;br /&gt;&amp;nbsp; &amp;nbsp; JCC start&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; ; carry not altered&lt;br /&gt;&lt;br /&gt;end:&lt;br /&gt;&amp;nbsp; &amp;nbsp; JCC end&lt;br /&gt;&lt;br /&gt;a: 10&amp;nbsp; ; a &amp;amp; b are the two values to consider&lt;br /&gt;b: 30&lt;br /&gt;&lt;br /&gt;allone: 0xff&amp;nbsp; ; various constants&lt;br /&gt;zero:&amp;nbsp; &amp;nbsp;0&lt;br /&gt;one:&amp;nbsp; &amp;nbsp; 1&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Next step is to describe this trivial core in a synthesisable form and see how I get on running it through one or two FPGA flows. A few tests and some verification could be useful too! For FPGAs I'm much more used to the general &lt;em&gt;suck it and see &lt;/em&gt;style of testing that is the norm. Synthesize, place and route and see if it works. In the last several years I've been working on much larger ASICs so have certainly seen the value of more robust verification and I think FPGA technology has probably spent too much time as the wild frontier of design robustness and testing. As this project progresses I want to explore what the best balance is for testing and how the test environments can use the FPGA to accelerate testing along the way.&lt;/p&gt;

&lt;p&gt;So plenty of things up in the air but I think this could be fun.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</summary><category term="cpu"></category><category term="dac"></category><category term="eda"></category><category term="esl"></category><category term="software"></category><category term="verification"></category></entry><entry><title>visual commitment</title><link href="http://fivecomputers.com/visual-commitment.html" rel="alternate"></link><updated>2008-06-17T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-06-17:visual-commitment.html</id><summary type="html">&lt;p&gt;&lt;a title="graphic by Gordon McGregor, on Flickr" href="http://www.flickr.com/photos/mcgregorphoto/2514642239/"&gt;&lt;img width="500" height="333" alt="graphic" src="http://farm3.static.flickr.com/2006/2514642239_13100d1a20.jpg" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;I've had an on again/ off again interest in visualization tools to enhance design and verification for many years. I've written log file parsers to show data in a more friendly way to enhance debug, or TCL/Tk widgets that demonstrate activity on bus ports of a SystemC AMBA switch model. Tools that at first glance might seem somewhat pointless visual trinkets can really enhance debug, by letting the brain search for patterns more easily within data. For example, with the bus switch, it was visually easy to see which bus wasn't getting any traffic, which could have been extracted from a log, but would have required more thought. Patterns of burstiness or busyness can also be seen quite easily. Similar results can usually be achieved with grep or clever regular expressions, but I find I end up having to keep a lot more data in my head, which pushes out the brainpower I might apply to actually working on the real problem.&lt;/p&gt;

&lt;p&gt;Well written visualisations present the data in a more accessible way, letting you get to the problems more quickly. A good example of these from the recent DAC are a couple of OCP tools by &lt;a href="http://www.duolog.com/"&gt;Duolog&lt;/a&gt;. The tools present typical OCP information in a more easily interpretable way, &lt;a href="http://www.duolog.com/products/ocp-toolkit/conductor"&gt;colouring related transactions in a log file&lt;/a&gt;, or &lt;a href="http://www.duolog.com/products/ocp-toolkit/tracker"&gt;showing bus bandwidth&lt;/a&gt;. It is much simpler to trace a series of transactions this way, or find buses that are being starved or overloaded. The information could have been directly extracted from the log file by the user, but the visualisations make things easier and quicker.&lt;/p&gt;

&lt;p&gt;I've been playing around with&amp;nbsp; &lt;a href="http://www.flashdevelop.org/"&gt;Flash&lt;/a&gt; and also just started reading about the &lt;a href="http://processing.org/"&gt;Processing&lt;/a&gt; language over the weekend. Co-incidentally, I happened across these &lt;a href="http://vis.cs.ucdavis.edu/~ogawa/codeswarm/"&gt;visualisations of version control commits&lt;/a&gt; for several large projects, written in Processing. These give a good indication of how visualisations can show a lot of very complex data in a more accessible way. &lt;a href="http://www.vimeo.com/1093745"&gt;The Python visualisation&lt;/a&gt; was particularly interesting to show how few contributers there were until an explosion of contributions around the year 2000 wander on to the stage.&lt;/p&gt;

&lt;p&gt;As our SoC designs keep getting larger, I believe that more accessible means to interpret the verification and design data and results will be needed, beyond just waveforms and log traces. I would be interested to see what the ebb and flow of check-ins look like for a complex, modern SoC. We tend to think that hardware design is just the same as software design by another name, but you might start to see structural differences in how the code and modifications organise themselves. &lt;/p&gt;

&lt;p&gt;The Python case shows one leader, banging away on their own, suddenly joined en mass when the code base becomes popular. SoCs will also probably demonstrate Conway's Law visually, mirroring the organisational structure that put the design together. Pairs of verification and design engineers working together, sub-assemblies, clustering around organisational and functional boundaries. The vast majority of changes would be much more localised than you see in a large software project such as Python. Quite possibly other software projects fall along similar modular designs but it would be instructive to see the visualisations side by side - perhaps with the organisational (or lack of) human structure overlaid.&lt;/p&gt;</summary><category term="dac"></category></entry><entry><title>DAC for verification</title><link href="http://fivecomputers.com/dac-for-verification.html" rel="alternate"></link><updated>2008-06-06T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-06-06:dac-for-verification.html</id><summary type="html">&lt;p&gt;Each year, John Cooley does a great job &lt;a href="http://www.deepchip.com/gadfly/gad060608.html"&gt;previewing the companies &lt;/a&gt;at DAC. From that list, here's the ones that sound interesting to me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OneSpin&lt;/strong&gt;'s 360MV tool does something called "gap-detection" plus timing diagrams on your design's System Verilog Assertions. (booth 625)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real Intent Meridian CDC&lt;/strong&gt; for clock domain crossing verification.  Formal analysis and interfaces to simulation.&lt;br /&gt;
(booth 2540)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NuSym DeNibulator&lt;/strong&gt;'s intelligent testbench"   It hunts down your hard to find coverage points and automatically tweaks your TB to reach them.  It's next gen constrained random.  (booth 379)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Certess Certitude&lt;/strong&gt; testbench error injection.(booth 324)&lt;/p&gt;

&lt;p&gt;Another "intelligent testbench" is &lt;strong&gt;Mentor inFact&lt;/strong&gt; - graphical tool that generates, grades, and then upgrades TBs.  It&lt;br /&gt;
now drives existing e, Vera, SV, or C/C++ TBs.  Does OVM &amp;amp; VMM.(booth 2301)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CebaTech&lt;/strong&gt; is showing their C2R Compiler,which takes untimed ANSI C and outputs Verilog RTL. (booth 760)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forte Cynthesizer v3.4&lt;/strong&gt; (SystemC design) adds support for Power Compiler for "best-in-class area, performance, and now power results" and "management of ECOs by graphically mapping RTL back to the original SystemC design" and inter-block interfaces.(booth 1645)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mentor 's &lt;/strong&gt;&lt;strong&gt;Catapult C &lt;/strong&gt;synth &amp;amp; Vista ESL tools. (booth 2301)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Carbon's Model Studio&lt;/strong&gt; does Verilog-RTL-to-C conversion for simulation, to get early models for architectural work(booth 2467)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synfora Pico Extreme&lt;/strong&gt; C synthesis tool (booth 329)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bluespec&lt;/strong&gt; : "general purpose high-level synthesis &amp;amp; simulationfor modeling, verification and implementation". (booth 2367)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Imperas :&lt;/strong&gt; yet-another-ISS tool, OVPsim, for embedded SW. (booth 467)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mirabilis VisualSim&lt;/strong&gt; does "graphical SystemC TLM 2.0 import without any code development; and power estimation of the full system." (booth 778)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steve Golson's "Four Principles of Flow Engineering"&lt;/strong&gt; DAC Tuesday at 10:30 AM, Room 206AB&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dassault Synchronicity DesignSync&lt;/strong&gt; Cadence data management tools. (booth 620)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EVE ZeBu&lt;/strong&gt; is showcasing PCIe and AXI synthesizable transactors and its System Verilog support for custom transactors.(booth 301)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mentor Veloce&lt;/strong&gt; "using mixed System Verilog and SystemC based upon System Verilog DPI standard 2.0" with Nucleus embedded RTOS (booth 2301)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synfora Pico Extreme FPGA&lt;/strong&gt; (booth 329)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VeriEZ EZVerify &lt;/strong&gt;covers you design, assertions and testbench, with added full System Verilog support this year plus VMM/OVM checking (booth 1936)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Veritools&lt;/strong&gt; usually has linters, code coverage and waveform viewers.  Supports SV dynamic objects. (booth 1334)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denali&lt;/strong&gt; &lt;strong&gt;PureSpec&lt;/strong&gt; System Verilog methodology support (OVM,VMM, AVM) in all IP blocks. (booth 1611)&lt;/p&gt;</summary><category term="software"></category><category term="verification"></category></entry><entry><title>About Gordon McGregor</title><link href="http://fivecomputers.com/about-gordon-mcgregor.html" rel="alternate"></link><updated>2008-05-29T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-05-29:about-gordon-mcgregor.html</id><summary type="html">&lt;p&gt;Gordon McGregor is a Verification Consultant at &lt;a href="http://www.verilab.com"&gt;Verilab, Inc&lt;/a&gt;, based in Austin, Texas.

Prior to that, Gordon worked for &lt;a href="http://www.freescale.com"&gt;Freescale Semiconductor&lt;/a&gt;, &lt;a href="http://www.motorola.com"&gt;Motorola&lt;/a&gt; and Pilkington Microelectronics for 7 years through various buy-outs, take-overs and spin-offs, moving from Glasgow, Scotland, to Northwich in England and finally to Austin, Texas.

&lt;/p&gt;

&lt;p&gt;He received a Bachelor's degree, Master's degree and PhD from the &lt;a href="http://www.strath.ac.uk"&gt;University of Strathclyde&lt;/a&gt;, Scotland, in 1993, 1994 and 2005. Mostly these were in electronics, with an end bias towards dynamic reconfiguration of Field Programmable Gate Arrays (FPGAs) and methodology improvements to make dynamic reconfiguration a practical, deployable reality.

&lt;/p&gt;

&lt;p&gt;His particular areas of interest are in functional verification techniques and electronic system level design along with the application of the lessons learned in the field of software engineering to the world of hardware design.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>is this thing on...?</title><link href="http://fivecomputers.com/is-this-thing-on.html" rel="alternate"></link><updated>2008-05-29T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-05-29:is-this-thing-on.html</id><summary type="html">&lt;p&gt;Thomas J. Watson, the president of IBM,  once famously &lt;a href="http://en.wikipedia.org/wiki/Thomas_J._Watson"&gt;didn't say&lt;/a&gt; that &lt;em&gt;I think there is a world market for maybe five computers.&lt;/em&gt; He is still widely quoted as having said it and it is usually trotted out as a good example of why we shouldn't make predictions about the future of technology. Mainly because those predictions almost always will make us look entirely foolish. The title of this blog is based on that quote, in the hope that it'll discourage me from making too many painful statements about what I think the future of EDA and verification might be, but that's what this blog is going to be about.&lt;/p&gt;

&lt;p&gt;Electronic design automation and functional verification are two pieces of the puzzle aiming to help close the design gap in the semiconductor industry. That's the gap between the amount of transistors we can put on a piece of silicon and the amount of transistors we can usefully put together to produce a working system that does something useful, in a reasonable period of time. The device physics guys have done a great job of getting well ahead of what we can usefully design. The main gap doesn't really seem to be what can be designed, though. It is what can be tested and verified to actually do what it is supposed to do.&lt;/p&gt;

&lt;p&gt;There are more challenges further down the pipe too, timing closure looms ever larger as a problem, further reduction in geometries threaten the basic assumptions that let us typically ignore the nasty analog reality and pretend we are in some digital fantasy of ones and zeros. Those are all big problems or at least getting bigger, but functional verification is swallowing vast amounts of engineering time on projects right now and we seem to be getting ever further behind the curve. ( I feel already that I've made two potential &lt;em&gt;5 computers&lt;/em&gt; kind of statements in just this one paragraph.) EDA tools keep promising great leaps forward, but we still seem to be seeing the same promises and not so much progress. Raising the abstraction level of the design languages, increasing the quality of the verification, more reuse and large amounts of money invested in creating IP, but largely the industry still appears to be where it was 10 years ago - just with more people working ever harder on each product.&lt;/p&gt;

&lt;p&gt;The one saving grace in all this is that there is quite the demand for semiconductor devices. If you start counting up all the computers, portable devices, smart cars and embedded processors in use around your life,  you'll probably quite quickly realise you've maxed out that world market for 5 computers all on your own. In fact it is probably closer to 50 computers or computing devices in use around you. So at least the demand for products is there, even if we aren't quite sure how to design them all effectively, yet.&lt;/p&gt;</summary><category term="eda blogs"></category><category term="software"></category><category term="verification"></category></entry><entry><title>sessions at DAC 2008</title><link href="http://fivecomputers.com/sessions-at-dac-2008.html" rel="alternate"></link><updated>2008-05-29T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-05-29:sessions-at-dac-2008.html</id><summary type="html">&lt;p&gt;I haven't been to the &lt;a href="http://dac.com"&gt;Design Automation Conference&lt;/a&gt; (DAC) for several years. Last time I was there, SystemC was the hot new language on the block, ready to revolutionise the design and verification world. In the intervening years, the hype has died down a bit and SystemC has settled into a comfortable niche as a solid option for doing higher level modeling, that previously was done in a roll your own C or C++ environment. The features for modeling parallelism and communication along with structure are good enough to mean you don't need to do it all from scratch. The speed is slowly getting better, but it isn't going to change the design world. It somewhat dropped the ball by being implemented as a set of library extensions to C++, rather than an enclosed language (which would have had the potential at least to be synthesisable - something SpecC got right).&lt;/p&gt;

&lt;p&gt;Now several years later, the hot new language on the block, ready to revolutionise the design and verification world is SystemVerilog. Low level enough to write hardware. Feature rich enough to support verification. An IEEE standard (that nobody quite implements). All things to all people. Maybe. Or maybe 3 distinct languages that happen to run together on one simulator - which seems closer to the reality. A step in the right direction perhaps, and certainly the current flavour of the month. OVM and VMM (verification libraries built on top of SystemVerilog) are the thing that kept coming up time and again as I looked through the DAC sessions, with an eye towards verification and system-level design. With the news that the VMM is open source, along with the already freely available OVM, perhaps the opportunity to merge to one set of libraries across the big three has some potential, if we ignore all the legacy investment that will still need to be supported.&lt;/p&gt;

&lt;p&gt;These are the sessions that caught my eye at this year's DAC and that I hope to attend. I'm surprised quite how many of them overlap, so I suspect I'll be missing more than I might like. There is so much going on this year! I plan on blogging throughout the conference and sharing the interesting things I find.&lt;br /&gt;
&lt;h2&gt;Monday 9th June&lt;/h2&gt;&lt;br /&gt;
&lt;a href="http://www.mentor.com/events/dac/schedule.cfm"&gt;Find the Toughest Bugs with Mentor Graphics 0-In Formal Verification&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.doulos.com/content/events/dac08.php"&gt;Migrating to OVM for Multi-Language Verification&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.dac.com/events/eventdetails.aspx?id=77-102"&gt;Gary Smith on EDA: Trends and What's Hot at DAC&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.systemc.org/news/pr/view?item_key=0c33643edc9fca3fcd81281b4f0cb137b117ea71"&gt;Real World Advantages of the OSCI TLM-2.0 Standard for Model Interoperability and IP Reuse&lt;/a&gt;&lt;br /&gt;
&lt;h2&gt;Tuesday 10th June&lt;/h2&gt;&lt;br /&gt;
&lt;a href="http://www.mentor.com/events/dac/schedule.cfm"&gt;Catapult &amp;amp; Vista: Integrating ESL Synthesis &amp;amp; Verification&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.dac.com/events/eventdetails.aspx?id=77-15"&gt;Experiences and Advances in Formal and Dynamic Verification&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.dac.com/events/eventdetails.aspx?id=77-9"&gt;Formal Verification Technology&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.model.com/innovate.asp"&gt;Innovation in Verification Luncheon&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.dac.com/events/eventdetails.aspx?id=77-110"&gt;Multi-processor SoCs: The Next Generation&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.dac.com/events/eventdetails.aspx?id=77-13"&gt;iDesign II&lt;/a&gt; - practical aspects of using SystemVerilog&lt;br /&gt;
&lt;h2&gt;Wednesday 11th June&lt;/h2&gt;&lt;br /&gt;
&lt;a href="http://www.doulos.com/content/events/dac08.php"&gt;Getting Real With OVM, A True Open Source Verification Standard&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.dac.com/events/eventdetails.aspx?id=77-152"&gt;Challenges on Design Complexities for Advanced Wireless Silicon Systems&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.dac.com/events/eventdetails.aspx?id=77-30"&gt;Verifying Really Complex Systems: On Earth and Beyond&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.dac.com/events/eventdetails.aspx?id=77-20"&gt;Wild and Crazy Ideas&lt;/a&gt;&lt;br /&gt;
&lt;h2&gt;Thursday 12th June&lt;/h2&gt;&lt;br /&gt;
&lt;a href="http://www.dac.com/events/eventdetails.aspx?id=77-51"&gt;Advances in Verification of Abstract (pre-RTL) Models&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.mentor.com/events/dac/schedule.cfm"&gt;Closing the Loop in Intelligent Testbench Automation&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.dac.com/events/eventdetails.aspx?id=77-111"&gt;Your Functional Verification Roadmap: OVM, VMM, or Roll Your Own?&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.dac.com/events/eventdetails.aspx?id=77-44"&gt;Formal Verification: Dude or Dud? Experiences from the Trenches&lt;/a&gt;&lt;/p&gt;</summary><category term="verification"></category></entry><entry><title>time tracking</title><link href="http://fivecomputers.com/time-tracking.html" rel="alternate"></link><updated>2008-04-08T00:00:00-05:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-04-08:time-tracking.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.flickr.com/photos/52043707@N00/368709837/"&gt;&lt;img width="360" height="240" alt="Panamint" src="http://farm1.static.flickr.com/166/368709837_c0ff160659.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the realities of doing consulting work is time tracking. I've used notebooks. I've used palm pilots, that I carried around only to track time. I've tried web based applications. Nothing quite does what I want it to do or is simple enough to keep out of the way. I've been playing around with Ruby and the Rails frameworks to come up with a solution that really does what I want. &lt;a href="http://jexp.de/blog/archives/16-On-LEGO-Powered-Time-Tracking;-My-Daily-Column.html"&gt;Then I saw this&lt;/a&gt;. I might have to re-think the whole thing. I'm particularly impressed with the image capture/ automatic entry.&lt;/p&gt;</summary><category term="software"></category></entry><entry><title>large hadron collider</title><link href="http://fivecomputers.com/large-hadron-collider.html" rel="alternate"></link><updated>2008-03-08T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-03-08:large-hadron-collider.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.flickr.com/photos/52043707@N00/2730301368/"&gt;&lt;img src="http://farm4.static.flickr.com/3077/2730301368_3ce715dff6.jpg" height="222" width="360" alt="lhc" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty isn't it? This is the &lt;a href="http://cmsinfo.cern.ch/outreach/"&gt;Compact Muon Solenoid&lt;/a&gt; (or big electro-magnet) experiment tracker outer barrel from the &lt;a href="http://public.web.cern.ch/public/en/LHC/LHC-en.html"&gt;Large Hadron Collider&lt;/a&gt;. They are getting close to firing this up, over on the border between Switzerland and France. CERN starts the first particle beam tests this month, with the first real particle collisions happening towards the end of the year. I keep having &lt;a href="http://www.youtube.com/watch?v=cGqroT1FZ5Y"&gt;an REM song playing&lt;/a&gt; in the back of my head when I &lt;a href="http://www.boston.com/bigpicture/2008/08/the_large_hadron_collider.html"&gt;look at these pictures&lt;/a&gt;.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>new companies at DAC</title><link href="http://fivecomputers.com/new-companies-at-dac.html" rel="alternate"></link><updated>2008-03-06T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-03-06:new-companies-at-dac.html</id><summary type="html">&lt;p&gt;Based on the list of exhibitors and the scant information provided, these are some of new companies that appear to have a verification aspect to their products. I'll be finding out more next week on site. &lt;a href="http://www.chipdesignmag.com/bailey/"&gt;Brian Bailey&lt;/a&gt; has his take on DAC for Verification, over at &lt;a href="http://www.chipdesignmag.com/"&gt;Chip Design&lt;/a&gt; mag, that is worth a look if you are struggling to fill your schedule! There is quite an overwhelming amount of things packed in to next week.&lt;br /&gt;
&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://www.dvteclipse.com/"&gt;Amiq Consulting S.R.L.1&lt;/a&gt; &lt;ul&gt;&lt;li&gt;RTL level verification &amp;amp; verification IP&lt;br /&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.axilica.com/"&gt;Axilica Ltd.&lt;/a&gt;&lt;ul&gt;&lt;li&gt;Tools for UML modeling/simulation of HW/SW designs&lt;br /&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://www.duolog.com/"&gt;Duolog Technologies Ltd.&lt;/a&gt; &lt;ul&gt;&lt;li&gt;Intelligent testbench, ESL verification - Socrates design environment&lt;br /&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://www.imera.com/"&gt;Imera Systems, Inc.&lt;/a&gt; &lt;ul&gt;&lt;li&gt;Network virtualisation, remote debugging and source code access&lt;br /&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://www.paradigm-works.com/"&gt;Paradigm Works, Inc.&lt;/a&gt; &lt;ul&gt;&lt;li&gt;Verification services company. Selling SystemVerilog FrameWorks tools&lt;br /&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://www.satin-ip.com/"&gt;SAS Satin IP Technologies&lt;/a&gt; &lt;ul&gt;&lt;li&gt;Design reuse management flows &amp;amp; technology. VIP lane product for IP deployment&lt;br /&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://www.synapse-da.com/"&gt;Synapse Design Automation&lt;/a&gt; &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Design &amp;amp; Verification services company&lt;br /&gt;
&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="http://www.winterlogic.com/"&gt;WinterLogic Inc.&lt;/a&gt; &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Verilog fault simulator company: Fault Manager&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><category term="eda blogs"></category><category term="verification"></category></entry><entry><title>visualising complex datasets</title><link href="http://fivecomputers.com/visualising-complex-datasets.html" rel="alternate"></link><updated>2008-03-06T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-03-06:visualising-complex-datasets.html</id><summary type="html">&lt;p&gt;A great example of the sort of insight that you can glean from a lot of data, with the right sort of visualisation.&lt;/p&gt;

&lt;p&gt;&lt;object width="320" height="285" align="middle" id="VE_Player" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"&gt;&lt;param value="http://static.videoegg.com/ted/flash/loader.swf" name="movie" /&gt;&lt;param value="bgColor=FFFFFF&amp;amp;file=http://static.videoegg.com/ted/movies/HANSROSLING_high.flv&amp;amp;autoPlay=false&amp;amp;fullscreenURL=http://static.videoegg.com/ted/flash/fullscreen.html&amp;amp;forcePlay=false&amp;amp;logo=&amp;amp;allowFullscreen=true" name="FlashVars" /&gt;&lt;param value="high" name="quality" /&gt;&lt;param value="always" name="allowScriptAccess" /&gt;&lt;param value="#FFFFFF" name="bgcolor" /&gt;&lt;param value="noscale" name="scale" /&gt;&lt;param value="window" name="wmode" /&gt;&lt;embed width="320" height="285" align="middle" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" name="VE_Player" wmode="window" scale="noscale" bgcolor="#FFFFFF" allowscriptaccess="always" quality="high" flashvars="bgColor=FFFFFF&amp;amp;file=http://static.videoegg.com/ted/movies/HANSROSLING_high.flv&amp;amp;autoPlay=false&amp;amp;fullscreenURL=http://static.videoegg.com/ted/flash/fullscreen.html&amp;amp;forcePlay=false&amp;amp;logo=&amp;amp;allowFullscreen=true" src="http://static.videoegg.com/ted/flash/loader.swf"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;</summary><category term="eda"></category><category term="software"></category><category term="verification"></category></entry><entry><title>complete</title><link href="http://fivecomputers.com/complete.html" rel="alternate"></link><updated>2008-02-12T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-02-12:complete.html</id><summary type="html">&lt;p&gt;Finally! Now my Mac &lt;a href="http://news.bbc.co.uk/2/hi/technology/7760344.stm"&gt;can do everything&lt;/a&gt; my windows machine can do. I&amp;#39;m so happy.&lt;/p&gt;</summary><category term="software"></category></entry><entry><title>image recovery</title><link href="http://fivecomputers.com/image-recovery.html" rel="alternate"></link><updated>2008-01-12T00:00:00-06:00</updated><author><name>GordonMcGregor</name></author><id>tag:fivecomputers.com,2008-01-12:image-recovery.html</id><summary type="html">&lt;p style="text-align: center;"&gt;&lt;a href="http://www.flickr.com/photos/52043707@N00/3065452649/"&gt;&lt;img src="http://farm4.static.flickr.com/3284/3065452649_8fda438ae8.jpg" height="334" width="500" alt="" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.flickr.com/photos/mcgregorphoto"&gt;I take a lot of pictures&lt;/a&gt;. On occasion, I get too impatient when downloading images from my compact flash cards. I'll swap the card without ejecting it properly and sometimes the cards get corrupted. Typically, when that happens the file allocation table of the previous card that was in the reader gets written onto the new card, or the FAT gets corrupted in some other way. The images are still there, but you can't access them. This happened to me last weekend and I didn't have any recovery software on this laptop. I had a look around online and the only recovery programs I could find were close to $100. I had a bit of free time so I decided to try writing my own instead. Turns out a basic recovery tool is actually really simple to put together.&lt;/p&gt;

&lt;p&gt;A couple of things made it possible to do quite simple image recovery, successfully. Firstly, I always format the cards in the camera before I use them. So I know when the camera is writing images to the cards, the card is empty. Secondly, I never delete images in the camera. This means there is no fragmentation on the drive. The images are simply stored sequentially on the memory. The FAT format is fairly simple, based on sectors that are multiples of 512 bytes in size, that are collected together in clusters that vary depending on the disk formating. Images are written into linked lists of those clusters. Potentially the clusters could be fragmented across the drive, particularly if images are deleted and new ones stored on the disk. With a clean start and no images deleted, it is reasonable to assume that the images will just be stored on concurrent clusters. I think damaged sectors are managed at the a physical level on the disks, so they are mapped out of the available space (feel free to correct me on this). Anyway, with these assumptions made, it is possible to write a simple tool to parse a disk image and extract images, with a high likelihood of a successful result.&lt;/p&gt;

&lt;p&gt;The first step is to get the data. I did the recovery on a unix system and used &lt;em&gt;dd&lt;/em&gt; to get the initial image. You have to dump the actual physical device, not one of the disk partitions (as those are essentially what has become corrupt)&lt;/p&gt;

&lt;p style="text-align: center;"&gt;d&lt;em&gt;d if=/dev/rdisk1 of=image.img bs=512&lt;/em&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;The block size is set to 512 to match the formating of the compact flash card. This step takes a while, but eventually you'll have an image file, &lt;em&gt;image.img&lt;/em&gt; which is a low level copy of the data on the drive. The next step is to work out a way to identify the files you are looking to recover. I wrote a simple hex dump tool that prints the first few bytes of a file. I used this on a representative sample of the Canon &lt;em&gt;cr2&lt;/em&gt; RAW files to get a search key to identify the start of a file.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;--- show_header.py ---&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p style="text-align: left;"&gt;&lt;/p&gt;

  &lt;p style="text-align: left;"&gt;&lt;em&gt;import sys&lt;/em&gt;&lt;/p&gt;

  &lt;p style="text-align: left;"&gt;&lt;em&gt;file = open(sys.argv[1], 'rb')&lt;/em&gt;&lt;/p&gt;

  &lt;p style="text-align: left;"&gt;&lt;em&gt;header = file.read(12)&lt;/em&gt;&lt;/p&gt;

  &lt;p style="text-align: left;"&gt;&lt;em&gt;headerhex = header.encode('hex')&lt;/em&gt;&lt;/p&gt;

  &lt;p style="text-align: left;"&gt;&lt;em&gt;print headerhex&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;--- end show_header.py ---&lt;/p&gt;

&lt;p&gt;This little bit of python can be applied to a group of files with xargs&lt;/p&gt;

&lt;p style="text-align: center;"&gt;&lt;em&gt;ls *.cr2 | xargs -n 1 python show_header.py&lt;/em&gt;&lt;/p&gt;

&lt;p style="text-align: left;"&gt;From that output, it is easy enough to find a representive number of bytes that can be used to identify the start of a file. I also had recorded some audio with the camera, so did a similar process with .wav files to extract them correctly.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;Then all you have to do is iterate through the disk image in &lt;em&gt;block_size&lt;/em&gt; chunks, checking for those file signatures at the start of each sector. When you find a file signature, start dumping all the data to a new file, until you find another signature. That's all there is to it. Note that there are no warranties with this. I'm offering no guarantees that it will work, or even will not wipe your computer. &lt;strong&gt;Use at your own risk&lt;/strong&gt;. With this I was able to recover the 150+ images that I'd taken and several audio files. It actually works surprisingly quickly once the disk image has been made. Also worth mentioning that the JPEG header matching is untested, as I didn't have any JPEG files on this particular disk, but is included here for completeness.&lt;/p&gt;

&lt;p style="text-align: left;"&gt;&lt;a href="http://www.mcgregorphoto.com/pub/source/image_recovery.python"&gt;Download the source for image_recovery.py&lt;/a&gt; (you'll probably need to change the file extension - web server doesn't like serving .py files)&lt;/p&gt;</summary><category term="software"></category></entry></feed>